{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Mosaic","text":"<p>Mosaic is a low-level social media protocol in early development.</p> <p>Mosaic does not define social media application behavior, it only provides interoperable support services such as identity, standardized cryptography, bootstrapping, data formats, client-server protocol for posting and retrieving social media data, network transports, mechanisms for edit/delete, etc. Mosaic intends to be as unopinionated as possible. Social media applications themselves are then built on top of Mosaic and can have wildly different purposes and methods of operation.</p> <p>This specification is rendered with mkdocs using the material framework.</p> <p>This specification is being developed in parallel to a core library. The findings from development feed back into this specification.</p>"},{"location":"index.html#introduction","title":"Introduction","text":""},{"location":"index.html#what-users-want","title":"What user's want","text":"<p>The Internet is social. People want to communicate with each other. People want to post articles for the world to read. They want to comment on other people's posts. They want to have threaded discussions. They want to have chat room conversations that perhaps are not saved. Sometimes they want private rooms where only invited people can participate. People want feeds of updates from people they follow. They want to control what shows up in these feeds. They want secure private messaging. They want privacy. They want to edit their posts, and/or delete some of them. And there are thousands of more ways that people want to engage with other people socially over the Internet, from livestreaming and cooperative gaming to sharing pictures or sending money.</p>"},{"location":"index.html#what-is-wrong-with-how-users-currently-do-social-media","title":"What is wrong with how user's currently do social media","text":"<p>Mostly these desires are met currently by commercial services such as X (formerly Twitter), Reddit, YouTube, and Discord, to name just a few of the most popular. But there are number of new problems that commercial solutions bring to the table:</p> <ul> <li>There is little interoperability between these systems, and little desire to provide such.</li> <li>There are pressures to control and limit the kind of content that people can engage with   within advertiser-friendly constraints.</li> <li>There is pressure to advertise.</li> <li>There are pressures to censor content which happens to run counter to the desires of the   powerful.</li> <li>Users are lower-class participants compared to advertisers, and compared to the powerful that   run the platforms and can (and do) ban users at a whim.</li> <li>There are legal agreements which are usually rather onerous.</li> <li>Anonymity is often not well supported.</li> <li>Users have little guarantee that the service they are using will continue to operate in a   fashion they are happy with.</li> </ul>"},{"location":"index.html#respect-for-users","title":"Respect for Users","text":"<p>Mosaic on the other hand is created by the users and for the users. It is our philosophy that users and service providers are equal-class participants. Everybody is equally respected.</p> <p>Mosaic is not the only social media protocol to take this user-first approach. Nostr and Secure Scuttlebutt (among others) also take this approach.</p> <p>Note that other well-known distributed protocols do not quite achieve it. Mastodon elevates the server over the users, making servers into fiefdoms. Bluesky pretends in theory to respect the user, but in practice it walks the same path as the commercial solutions do.</p>"},{"location":"index.html#identity","title":"Identity","text":"<p>Identity is the core mechanism by which Mosaic puts the power back into the hands of users. A Mosaic identity is just a digital signature keypair. Anybody can create one randomly. There are 115,792,089,237,316,195,423,570,985,008,687,907,853,269,984,665,640,564,039,457,584,007,913,129,639,936 possible keypairs in a 256-bit cryptosystem, so there is no chance that you will accidently choose the same one as somebody else, or that somebody will stumble upon your secret key.</p> <p>Once you create your own identity, you can create Mosaic records and say anything you want to say, and digitally sign the record with this keypair. Over time people will come to know you by your keypair.</p> <p>In order to share records, you'll need to do a few additional things:</p> <ol> <li>Arrange for a server (or more typically, multiple servers) to host them.</li> <li>Advertise to the world which servers your identity is currently hosting it's records at.</li> </ol>"},{"location":"index.html#service-providers","title":"Service Providers","text":"<p>Service providers are also respected users of Mosaic. They provide servers where records can be hosted.</p> <p>Service providers can do anything they want with regards to people's records:</p> <ul> <li>They can selectively censor posts they don't want to host.</li> <li>They can ban users.</li> <li>They can block abusive IP addresses.</li> <li>They can charge for hosting services.</li> <li>They can violate the Mosaic specification (of course if they do, they are no longer Mosaic   servers by definition).</li> </ul> <p>You might at first think that, for users, this situation is no different than the commercial situation we have now. But it is very different. Because the user controls their identity, not the service provider. Let's look at what servers cannot do:</p> <ul> <li>They cannot stop a user from posting their content somewhere else.</li> <li>They cannot stop a user from switching to another service provider.</li> <li>They cannot delete a user's identity.</li> <li>They cannot interfere with the user's followers or who follows the user.</li> <li>They cannot edit posts or create fake posts that appear to be from the user.</li> </ul> <p>Users can change service providers at any time and Mosaic is designed such that this is seamless and transparent to all those people following the user.</p> <p>One caveat is that when a user arranges to use a new provider, they will wish to copy their data to this new provider. If they only had one prior provider and that prior provider banned them, they could lose access to their data. This is solvable in multiple ways including using multiple service providers for redundancy, and keeping a backup of your data locally.</p> <p>Mosaic makes it straightforward to have multiple service providers.</p> <p>And since Mosaic is an open protocol, anybody can stand up a server. That means users can self-host their own server. In such a circumstance, Mosaic becomes peer-to-peer.</p> <p>Because nobody can control what a server does other than the server's operator, users must be judicious about which servers they choose to use, and clients (which act on behalf of users) should automatically detect when servers are failing to meet the user's needs, so that the user can be alerted to the situation and take the appropriate action.</p> <p>Just like with webservers, there is no limit to how many Mosaic servers can exist (nostr has already thousands), and we expect that everybody can find a server willing to hosts their records, or at the very least, stand up their own server to do it. Servers need only be Internet accessible; they don't need to be in data centers.</p>"},{"location":"index.html#advertising-your-service-providers","title":"Advertising your Service Providers","text":"<p>Users advertise their service providers in the bittorrent mainline (Kademlia) DHT.</p>"},{"location":"applications.html","title":"Application Registry","text":"Application ID Link Mosaic Core 0 this document Mosaic Social Media 1 this document Examples 99 unspecified <p>Applications are specified separately from Mosaic, except for Mosaic Core and Mosaic Social Media.</p> <p>Application IDs are 4-byte unsigned integers.</p> <p>Application IDs outside of this Mosaic spec SHOULD be selected randomly to avoid the chance of collision with other applications that have not registered their ID with us.</p> <p>External groups may define applications and have their Application ID registered here. We would appreciate knowing about your application, and listing it here both further avoids collision risk, and advertises its availability.</p>"},{"location":"blog.html","title":"Blog Post (kind)","text":""},{"location":"blog.html#kind","title":"Kind","text":"<p>Applicaton: 1 (Mosaic Social Media)</p> <p>App Kind: 3 (Blog Post)</p> <p>Flags: 0x001c = Unique, Everybody, Printable</p> <p>Representation = 0x0000_0001_0003_001c</p>"},{"location":"blog.html#tags","title":"Tags","text":"<p>Blogs SHOULD not have the following tags: 0x1, 0x2, 0x3, 0x4, 0x5, 0x6.</p> <p>Blogs MAY have 0x7.</p>"},{"location":"blog.html#payload","title":"Payload","text":"<p>The payload follows the Human Readable Content rules.</p>"},{"location":"blog.html#flags","title":"Flags","text":"<p>There are no special flag restrictions.</p>"},{"location":"blog.html#server-used","title":"Server Used","text":"<p>These are posted to all of the author's Outbox servers.</p>"},{"location":"bootstrap.html","title":"Bootstrap","text":"<p>When you first find out about a new public key, you may already know by the context if it represents a user or a server. But sometimes you don't even know that. You also may not know what servers this key uses to host it's key schedule and profile information, or which it uses to publish its records or receive messages, or if a server, which URLs it is available at.</p> <p>Bootstraps are public digitally signed records designed to let you acquire this kind of information.</p> <p>We store bootstraps in Mainline DHT.</p> <p>Bootstraps are not records. They have their own format.</p> <p>Bootstraps MUST always be signed by a master key, never by a subordinate key.</p>"},{"location":"bootstrap.html#bootstrap-format","title":"Bootstrap Format","text":"<p>Bootstraps are UTF-8 valid text up to 983 <sup>rat</sup> bytes long, and consist of a series of lines separated with a single ASCII Line Feed (LF) character (<code>\\n</code>). Lines MUST NOT have trailing whitespace.</p> <p>Two kinds of bootstraps MAY be stored, based on whether the identity represents a server or a user.</p>"},{"location":"bootstrap.html#server-bootstraps","title":"Server Bootstraps","text":"<p>Server bootstraps provide the URLs that a server is available on.</p> <p>The order of the entries expresses the preference or priority. Earlier entries are preferred by the server to later ones.</p> <p>A server bootstrap starts with the line <code>S</code>.</p> <p>Each subsequent line in a server bootstrap specifies a URL where the server can be accessed.</p> <p>Here is an example server bootstrap:</p> <pre><code>S\nmosaicwss://myserverlk23lkjsefo8u.onion\nmosaictcp://203.0.113.1\nmosaic://203.0.113.2:5198\nmosaic://[2001::130F::09C0:876A:130B]\n</code></pre> <p>Servers MAY list as many endpoints as they desire.</p> <p>Servers are expected to operate as their own inbox, outbox and encryption server. So they do not require the same data as the user bootstrap.</p>"},{"location":"bootstrap.html#user-bootstrap","title":"User Bootstrap","text":"<p>User bootstraps specify servers that the user uses, and how the user uses them.</p> <p>The order of the entries expresses the preference or priority. Earlier entries are preferred by the user to later ones.</p> <p>A user bootstrap starts with the line <code>U</code>.</p> <p>Each line consists of two parts separated by a single ASCII space.</p>"},{"location":"bootstrap.html#server-usage-character","title":"Server Usage Character","text":"<p>This first part is a single character that encodes that kind of usage.</p> <p>Refer to Network Architecture for the meanings of Outbox, Inbox and Encryption servers.</p> <p>There MAY be other ways to use servers and thus there MAY be other types of server usages. However, such other server usages are not published in this bootstrap. Applications can publish a regular record to the users outbox listing additional application specific servers as necessary.</p> <p>If there is a strong case for including additional server usages here in the base Mosaic spec, it may be added here prior to the 1.0 freeze.</p> <p>Outbox is indicated by bit 0 (<code>1&lt;&lt;0</code>) in the character. A 1 bit means the server is an outbox server.</p> <p>Inbox is indicated by bit 1 (<code>1&lt;&lt;1</code>) in the character. A 1 bit means the server is an inbox server.</p> <p>Encryption is indicated by bit 2 (<code>1&lt;&lt;2</code>) in the character. A 1 bit means the server is an encryption server.</p> <p>Bits 3 and 4 are RESERVED and MUST be 0.</p> <p>Bits 5 and 6 MUST BE always on. This is an ASCII '0' (48, 0x30). However a <code>0</code> MUST never be used as a server usage character as this would indicate no server usages, which is invalid as such a line MUST NOT exist.</p> <p>Bits 7 and 8 are RESERVED and MUST be 0.</p> <p>For example, to indicate only outbox usage, use character <code>1</code>. To indicate all three usages, use <code>7</code>.</p> <p>Conveniently with this encoding the ASCII number also matches the relavant bits.</p>"},{"location":"bootstrap.html#server-key","title":"Server Key","text":"<p>The second part of each line is the server's public key, encoded according to human encodings as a <code>mosrv0</code>. This are 58 characters long.</p>"},{"location":"bootstrap.html#example","title":"Example","text":"<p>Here is an example user bootstrap:</p> <pre><code>U\n1 mosrv0naeu8zzpu4g9g8jwqkpsrxoje5gwtwzh7bxzkek51mkwbe7x3oqo\n3 mosrv04fapk8fyyuoxjuwjwp5cmnuaqtoc519jsmz7qnzjp6r73ect966o\n2 mosrv09drnk9atpgk75qkhchyxn63nr7qzd1nfzxr8hk1xw8fd4xsznodo\n6 mosrv041wfk1mo87xzt8uazdng9dhhcz9ypzernfyeznhg7me7y9nsjkxy\n</code></pre> <p>Based on size limits of 983 bytes, no more than 16 server entries can be listed. But see below for other limitations on the number of servers.</p> <p>Users can change servers and update these bootstrap entries at any time.</p> <p>Clients SHOULD check for updates to bootstrap records if their cached data is more than an hour old.</p>"},{"location":"bootstrap.html#usage-of-servers-and-limits-on-their-number","title":"Usage of servers and limits on their number","text":"<p>Maximums: Users SHOULD list no more than 3 redundant servers of any kind, since more redundancy provides strongly diminishing benefit at a linearly increasing network traffic cost. Software MUST utilize the first three servers of the appropriate kind listed, and MAY tolerate additional servers but MAY also choose to ignore additional servers.</p> <p>Minimums: Users MUST have at least one outbox and at least one inbox. Users MAY have no encryption servers, but then they will not be able to receive encrypted messages.</p>"},{"location":"bootstrap.html#bootstrap-distribution","title":"Bootstrap Distribution","text":""},{"location":"bootstrap.html#master-keypairs","title":"Master keypairs","text":"<p>We use Mainline DHT <sup>rat</sup> to store mutable data signed under an ed25519 signature according to BitTorrent BEP 0044.</p> <p>Limitations:</p> <ul> <li>Data SHOULD be refreshed every hour, as it MAY expire in 2 hours.   Users are responsible for arranging for their data to be periodically refreshed   in the Mainline DHT, which will otherwise disappear over time. Services and   mechanisms for this are out of scope for Mosaic Core, but servers MAY offer such   a service.</li> <li>Data storage and retrieval may take a few seconds, and should not be done too   frequently. Software SHOULD cache results for at least 30 minutes before checking   for updates.</li> <li>To use Mainline DHT, you need to start from a bootstrap node. We list some here   in the hopes that this helps someone get started, but others exist and you can   even set up your own using (for example)   bootstrap server.<ul> <li><code>router.bittorrent.com</code> port 6881</li> <li><code>dht.transmissionbt.com</code> port 6881</li> <li><code>dht.libtorrent.org</code> port 25401</li> </ul> </li> </ul>"},{"location":"bootstrap.html#salt","title":"Salt","text":"<p>We use a salt <sup>rat</sup>  of <code>msb24</code> for server bootstraps and <code>mub25</code> for user bootstraps.</p>"},{"location":"bootstrap.html#sequence-numbers","title":"Sequence Numbers","text":"<p>Sequence numbers <sup>rat</sup> SHOULD start at 1 and MUST monotonically increase with each write.</p>"},{"location":"bootstrap.html#rust-code","title":"Rust code","text":"<p>There is a rust library to access this called mainline</p>"},{"location":"chat.html","title":"Chat Message (kind)","text":""},{"location":"chat.html#kind","title":"Kind","text":"<p>Applicaton: Mosaic Social Media</p> <p>App Kind: 4 (Chat Message)</p> <p>Flags: 0x001c = Unique, Everybody, Printable</p> <p>Representation = 0x0000_0001_0004_001c</p>"},{"location":"chat.html#tags","title":"Tags","text":"<p>This MAY include up to one refer tag, either 0x6 or 0x7.</p>"},{"location":"chat.html#payload","title":"Payload","text":"<p>The payload follows the Human Readable Content rules.</p>"},{"location":"chat.html#flags","title":"Flags","text":"<p>There are no special flag restrictions.</p>"},{"location":"chat.html#server-used","title":"Server Used","text":"<p>These are posted to a Chat Server.</p>"},{"location":"core_tags.html","title":"Mosaic Core Tags","text":"Tag Notify Public Key Reply Root Nostr Sister Event Subkey Content Segment: User Mention Content Segment: Server Mention Content Segment: Quote Content Segment: URL Content Segment: Image Content Segment: Video"},{"location":"core_tags.html#notify-public-key","title":"Notify Public Key","text":"<p>0x1</p> <pre><code>      0       2       4                  8\n 0x0  +-------------------------------+ 0\n      |  40   |  0x1  |   zeroed      |\n 0x8  +-------------------------------+ 8\n      | PUBLIC KEY 1/4                |\n 0x10 +-------------------------------+ 16\n      | PUBLIC KEY 2/4                |\n 0x18 +-------------------------------+ 24\n      | PUBLIC KEY 3/4                |\n 0x20 +-------------------------------+ 32\n      | PUBLIC KEY 4/4                |\n 0x28 +-------------------------------+ 40\n</code></pre> <ul> <li><code>[0:2]</code> - The length 40 as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x1 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - Zeroed</li> <li><code>[8:40]</code> - public key (32 bytes)</li> </ul> <p>Records with this tag indicate that the record is of interest to the person identified by that public key (as their master key).  Being tagged as such, it SHOULD be delivered to all of this persons' INBOX servers as specified in their bootstrap record.</p>"},{"location":"core_tags.html#reply","title":"Reply","text":"<p>0x2</p> <pre><code>      0       2      4       6         8\n 0x0  +-------------------------------+ 0\n      |  64   | 0x2  |    zeroed      |\n 0x8  +-------------------------------+ 8\n      | KIND                          |\n 0x10 +-------------------------------+ 16\n      | REFERENCE 1/6                 |\n 0x18 +-------------------------------+ 24\n      | REFERENCE 2/6                 |\n 0x20 +-------------------------------+ 32\n      | REFERENCE 3/6                 |\n 0x28 +-------------------------------+ 40\n      | REFERENCE 4/6                 |\n 0x30 +-------------------------------+ 48\n      | REFERENCE 5/6                 |\n 0x38 +-------------------------------+ 56\n      | REFERENCE 6/6                 |\n 0x40 +-------------------------------+ 64\n</code></pre> <ul> <li><code>[0:2]</code> - The length 64 as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x2 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - Zeroed</li> <li><code>[8:16]</code> - The kind</li> <li><code>[16:64]</code> - The reference (48 bytes)</li> </ul> <p>This is a reply to another record in a threading sense.</p> <p><code>KIND</code> is an 8-byte record kind indicating the kind of record that this one replies to. Replies are application-independent and MAY reference records of any type. This information is provided to prevent lookup of records of kinds that software is not able to or does not wish to handle.</p> <p><code>REFERENCE</code> is a 48-byte reference to some other record indicating which other record this record replies to.</p> <p>If a record includes this tag, it MUST also include a Root tag as well.</p>"},{"location":"core_tags.html#root","title":"Root","text":"<p>0x3</p> <pre><code>      0       2       4      6        8\n 0x0  +-------------------------------+ 0\n      |  64   |  0x3  |    zeroed     |\n 0x8  +-------------------------------+ 8\n      | KIND                          |\n 0x10 +-------------------------------+ 16\n      | REFERENCE 1/6                 |\n 0x18 +-------------------------------+ 24\n      | REFERENCE 2/6                 |\n 0x20 +-------------------------------+ 32\n      | REFERENCE 3/6                 |\n 0x28 +-------------------------------+ 40\n      | REFERENCE 4/6                 |\n 0x30 +-------------------------------+ 48\n      | REFERENCE 5/6                 |\n 0x38 +-------------------------------+ 56\n      | REFERENCE 6/6                 |\n 0x40 +-------------------------------+ 64\n</code></pre> <ul> <li><code>[0:2]</code> - The length 64 as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x3 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - Zeroed</li> <li><code>[8:16]</code> - The kind</li> <li><code>[16:64]</code> - The reference (48 bytes)</li> </ul> <p>This indicates the root of the reply thread. This is to support loading an entire thread in one round trip.</p> <p><code>KIND</code> is a 8-byte record kind indicating the kind of record that the root record is. Threads are application-independent and MAY reference records of any type. This information is provided to prevent lookup of records of kinds that software is not able to or does not wish to handle.</p> <p><code>REFERENCE</code> is a 48-byte reference to some other record which is the root of the thread.</p> <p>If a record includes this tag, it MUST also include a Reply tag as well.</p>"},{"location":"core_tags.html#nostr-sister-event","title":"Nostr Sister Event","text":"<p>0x8</p> <pre><code>      0       2       4               8\n 0x0  +-------------------------------+ 0\n      |  40   |  0x8  |    zeroed     |\n 0x8  +-------------------------------+ 8\n      | NOSTR ID 1/4                  |\n 0x10 +-------------------------------+ 16\n      | NOSTR ID 2/4                  |\n 0x18 +-------------------------------+ 24\n      | NOSTR ID 3/4                  |\n 0x20 +-------------------------------+ 32\n      | NOSTR ID 4/4                  |\n 0x28 +-------------------------------+ 40\n</code></pre> <ul> <li><code>[0:2]</code> - The length 40 as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x8 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - Zeroed</li> <li><code>[8:40]</code> - The Nostr ID (32 bytes)</li> </ul> <p>For dual-stack clients that produce Nostr events alongside Mosaic records, and who want to track replies on sister events in nostr as well as here in Mosaic, this is a pointer to the sister event in nostr.</p> <p>NOTE: The nostr sister event will have a \"mosaic\" tag that contains the hex of the id of its Mosaic sister record.</p>"},{"location":"core_tags.html#subkey","title":"Subkey","text":"<p>0x10</p> <pre><code>      0       2        4              8\n 0x0  +-------------------------------+ 0\n      |  40   |  0x10  |    zeroed    |\n 0x8  +-------------------------------+ 8\n      | PUBLIC SUBKEY 1/4             |\n 0x10 +-------------------------------+ 16\n      | PUBLIC SUBKEY 2/4             |\n 0x18 +-------------------------------+ 24\n      | PUBLIC SUBKEY 3/4             |\n 0x20 +-------------------------------+ 32\n      | PUBLIC SUBKEY 4/4             |\n 0x28 +-------------------------------+ 40\n</code></pre> <ul> <li><code>[0:2]</code> - The length 40 as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x10 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - Zeroed</li> <li><code>[8:40]</code> - The subkey public key</li> </ul> <p>This is used only on key schedule records so that clients can look up a subkey to verify it's association to a master key.</p>"},{"location":"core_tags.html#content-segment-user-mention","title":"Content Segment: User Mention","text":"<p>0x20</p> <pre><code>      0       2        4              8\n 0x0  +-------------------------------+ 0\n      |  40   |  0x20  |   OFFSET     |\n 0x8  +-------------------------------+ 8\n      | PUBLIC KEY 1/4                |\n 0x10 +-------------------------------+ 16\n      | PUBLIC KEY 2/4                |\n 0x18 +-------------------------------+ 24\n      | PUBLIC KEY 3/4                |\n 0x20 +-------------------------------+ 32\n      | PUBLIC KEY 4/4                |\n 0x28 +-------------------------------+ 40\n</code></pre> <ul> <li><code>[0:2]</code> - The length 40 as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x20 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - The offset as a little-endian encoded unsigned integer.</li> <li><code>[8:40]</code> - public key (32 bytes)</li> </ul> <p>This is a mention of a person.</p> <p><code>OFFSET</code> is the offset into the content where the mention appears.</p> <p><code>PUBLIC_KEY</code> is the master public key of the person mentioned.</p> <p>Note that this is different from a Notify Public Key tag which indicates the record should be delivered to that person.  Instead, this tag indicates that a <code>@name</code> for the person SHOULD be rendered when rendering the content.</p>"},{"location":"core_tags.html#content-segment-server-mention","title":"Content Segment: Server Mention","text":"<p>0x21</p> <pre><code>      0       2        4              8\n 0x0  +-------------------------------+ 0\n      |  40   |  0x21  |   OFFSET     |\n 0x8  +-------------------------------+ 8\n      | PUBLIC KEY 1/4                |\n 0x10 +-------------------------------+ 16\n      | PUBLIC KEY 2/4                |\n 0x18 +-------------------------------+ 24\n      | PUBLIC KEY 3/4                |\n 0x20 +-------------------------------+ 32\n      | PUBLIC KEY 4/4                |\n 0x28 +-------------------------------+ 40\n</code></pre> <ul> <li><code>[0:2]</code> - The length 40 as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x21 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - The offset as a little-endian encoded unsigned integer.</li> <li><code>[8:40]</code> - public key (32 bytes)</li> </ul> <p>This is a mention of a server.</p> <p><code>OFFSET</code> is the offset into the content where the mention appears.</p> <p><code>PUBLIC_KEY</code> is the public key of the server.</p>"},{"location":"core_tags.html#content-segment-quote","title":"Content Segment: Quote","text":"<p>0x22</p> <pre><code>      0       2       4               8\n 0x0  +-------------------------------+ 0\n      |  64   |  0x22  |   OFFSET     |\n 0x8  +-------------------------------+ 8\n      | KIND                          |\n 0x10 +-------------------------------+ 16\n      | REFERENCE 1/6                 |\n 0x18 +-------------------------------+ 24\n      | REFERENCE 2/6                 |\n 0x20 +-------------------------------+ 32\n      | REFERENCE 3/6                 |\n 0x28 +-------------------------------+ 40\n      | REFERENCE 4/6                 |\n 0x30 +-------------------------------+ 48\n      | REFERENCE 5/6                 |\n 0x38 +-------------------------------+ 56\n      | REFERENCE 6/6                 |\n 0x40 +-------------------------------+ 64\n</code></pre> <ul> <li><code>[0:2]</code> - The length 64 as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x22 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - The offset as a little-endian encoded unsigned integer.</li> <li><code>[8:16]</code> - The kind of the quoted record</li> <li><code>[16:64]</code> - The id (48 bytes) of the quoted record</li> </ul> <p><code>OFFSET</code> is the offset into the content where the mention appears.</p> <p><code>KIND</code> is a 8-byte record kind indicating the kind of record that this one replies to. Replies are application-independent and MAY reference records of any type. This information is provided to prevent lookup of records of kinds that software is not able to or does not wish to handle.</p> <p><code>REFERENCE</code> is a 48-byte reference to the quoted record.</p>"},{"location":"core_tags.html#content-segment-url","title":"Content Segment: URL","text":"<p>0x24</p> <pre><code>      0       2        4              8\n 0x0  +-------------------------------+ 0\n      |  LEN  |  0x24  |   OFFSET     |\n 0x8  +-------------------------------+ 8\n      | URL...                        |\n      +-------------------------------+\n</code></pre> <ul> <li><code>[0:2]</code> - The length (8 plus the length of the URL) as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x24 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - The offset as a little-endian encoded unsigned integer.</li> <li><code>[8:]</code> - The URL to be included</li> </ul> <p><code>OFFSET</code> is the offset into the content where the mention appears.</p> <p><code>URL</code> is the URL to be inserted at the offset.</p> <p>This is a URL to a web page.</p>"},{"location":"core_tags.html#content-segment-image","title":"Content Segment: Image","text":"<p>0x25</p> <pre><code>      0       2    3   4              8\n 0x0  +-------------------------------+ 0\n      |  LEN  |  0x25  |   OFFSET     |\n 0x8  +-------------------------------+ 8\n      | URL...                        |\n      +-------------------------------+\n</code></pre> <ul> <li><code>[0:2]</code> - The length (8 plus the length of the URL) as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x25 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - The offset as a little-endian encoded unsigned integer.</li> <li><code>[8:]</code> - The URL to be included (up to 248 bytes long)</li> </ul> <p><code>OFFSET</code> is the offset into the content where the mention appears.</p> <p><code>URL</code> is the URL to be inserted at the offset.</p> <p>This is a URL to an image</p>"},{"location":"core_tags.html#content-segment-video","title":"Content Segment: Video","text":"<p>0x26</p> <pre><code>      0       2    3   4              8\n 0x0  +-------------------------------+ 0\n      |  LEN  |  0x26  |   OFFSET     |\n 0x8  +-------------------------------+ 8\n      | URL...                        |\n      +-------------------------------+\n</code></pre> <ul> <li><code>[0:2]</code> - The length (8 plus the length of the URL) as a little-endian encoded unsigned integer</li> <li><code>[2:4]</code> - The type 0x26 as a little-endian encoded unsigned integer</li> <li><code>[4:8]</code> - The offset as a little-endian encoded unsigned integer.</li> <li><code>[8:]</code> - The URL to be included (up to 248 bytes long)</li> </ul> <p><code>OFFSET</code> is the offset into the content where the mention appears.</p> <p><code>URL</code> is the URL to be inserted at the offset.</p> <p>This is a URL to a video</p>"},{"location":"cryptography.html","title":"Cryptography","text":""},{"location":"cryptography.html#hashing-with-blake3","title":"Hashing with BLAKE3","text":"<p>Mosaic uses BLAKE3 <sup>rat</sup> in unkeyed hashing mode, producing a 512-bit digest. The entire digest is used within the EdDSA ed25519 signing algorithm, and a prefix of this digest is used within the record Id.</p> <p>Refer to the BLAKE3 github page</p>"},{"location":"cryptography.html#digital-signature-with-eddsa-ed25519","title":"Digital Signature with EdDSA ed25519","text":"<p>We use EdDSA with the ed25519 curve <sup>rat</sup> in a non-standard way. In particular</p> <ul> <li>We use ed25519ph, pre-hashed. We substitute BLAKE3 for SHA-512.</li> <li>We provide a context string of \"Mosaic\".</li> <li>We require very specific public key and signature validation checks. In particular:<ul> <li>Public keys MUST be rejected if they are one of 8 small order points.</li> <li>Signatures MUST be rejected if s is not within the range <code>0..L-1</code>.</li> <li>Signatures MUST be rejected if R or A are non-canonical   (e.g. verify that <code>|R| &gt;= L</code> and <code>|A| &gt;= L</code>)</li> <li>Always use cofactor verification <code>(8(S \u00b7 B) \u2212 8R \u2212 8(h \u00b7 A) = 0)</code> not the   non-cofactor one, even when not in batch mode.</li> </ul> </li> </ul>"},{"location":"cryptography.html#encryption","title":"Encryption","text":"<p>Encryption is NOT YET DEFINED at the Mosaic Core level, but may be in the future.</p> <p>Notes on how we might do it:</p> <ul> <li>Use ECIES</li> <li>Do the diffie-hellman between<ul> <li>an ephemeral keypair generated by the sender and used only once, and</li> <li>one of the recipient's x25519 public keys (published in their key   schedule), which is not ephemeral but may nonetheless be frequently   rolled over by the recipient.</li> </ul> </li> </ul> <p>In order for a user to decrypt on any of their devices, they MUST share the x25519 public key's secret to all of their devices. In order to preserve signing security, these keys are separate from ed25519 signing keys. See keyschedule marker 0x2.</p> <p>See also this page at cryptosys.net</p>"},{"location":"encrypted_secret_key.html","title":"Encrypted Secret Key","text":"<p>Encrypted secret keys are presented in a printable form with a <code>mocryptsec0</code> prefix.</p>"},{"location":"encrypted_secret_key.html#secret-handling","title":"Secret Handling","text":"<p>In situations where a user could enter a password to decrypt a secret key, the secret key should only be stored in this encrypted form and the user prompted for the password to decrypt it. The decrypted secret key should be kept only in memory and as best possible zeroized before memory is released.</p> <p>Within this algorithm, three pieces of data are secret and SHOULD be zeroed and handled as secret key material:  <code>PASSWORD</code>, <code>SYMMETRIC_KEY</code>,  <code>SECRET_KEY</code>, and <code>CHECKED_SECRET_KEY</code>.</p>"},{"location":"encrypted_secret_key.html#encryption-algorithm","title":"Encryption algorithm","text":""},{"location":"encrypted_secret_key.html#inputs","title":"Inputs","text":"<p><code>SECRET_KEY</code> = The secret key to be encrypted, as 32 bytes (not as human readable mosec0).</p> <p><code>PASSWORD</code> = Read from the user. The password should be unicode normalized to NFKC format to ensure that the password can be entered identically on other computers/clients. The password is temporary and SHOULD be zeroed and MUST be discarded after use and not stored or reused for any other purpose.</p> <p><code>LOG_N_BYTE</code> = Let the user or implementer choose one byte representing a power of 2 (e.g. 18 represents 262,144) which is used as the number of rounds for scrypt. Larger numbers take more time and more memory, and offer better protection. 18 is a reasonable default as of 2025. Implementations MAY fail if this value is greater than 22:</p> LOG_N MEMORY REQUIRED APPROX TIME ON FAST COMPUTER 16 64 MiB 100 ms 18 256 MiB 20 1 GiB 2 seconds 21 2 GiB 22 4 GiB"},{"location":"encrypted_secret_key.html#algorithm","title":"Algorithm","text":"<p><code>SALT</code> = 16 random bytes</p> <p><code>SYMMETRIC_KEY</code> = <code>scrypt(password=PASSWORD, salt=SALT, log_n=LOG_N_BYTE, r=8, p=1, dkLen=40)</code></p> <p>The symmetric key output should be 40 bytes long (the <code>dkLen</code>). This symmetric encryption key is temporary and SHOULD be zeroed and MUST be discarded after use and not stored or reused for any other purpose.</p> <p><code>RAND4</code> = Four random bytes</p> <p><code>CHECKBYTES</code> = <code>[0xb9, 0x60, 0xa1, 0xe2]</code></p> <p><code>RANDOMIZED_CHECKBYTES</code> = <code>xor(RAND4, CHECKBYTES)</code></p> <p><code>CHECKED_SECRET_KEY</code> = <code>CONCAT(SECRET_KEY, RAND4, RANDOMIZED_CHECKBYTES)</code></p> <p>This value is temporary and SHOULD be zeroed and MUST be discarded after use and not stored or reused for any other purpose.</p> <p><code>XOR_OUTPUT</code> = <code>xor(SYMMETRIC_KEY, CHECKED_SECRET_KEY)</code> <sup>rat</sup></p> <p><code>VERSION_NUMBER_BYTE</code> = 0x01</p> <p><code>CONCATENATION</code> = <code>concat( VERSION_NUMBER_BYTE, LOG_N_BYTE, SALT, XOR_OUTPUT )</code></p> <p><code>ENCRYPTED_SECRET_KEY</code> = <code>CONCAT('mocryptsec0', zbase32_encode(CONCATENATION))</code></p>"},{"location":"encrypted_secret_key.html#decryption-algorithm","title":"Decryption algorithm","text":""},{"location":"encrypted_secret_key.html#inputs_1","title":"Inputs","text":"<p><code>ENCRYPTED_SECRET_KEY</code> = Read as input</p> <p><code>PASSWORD</code> = Read from the user. The password should be unicode normalized to NFKC format to ensure that the password can be entered identically on other computers/clients. The password is temporary and SHOULD be zeroed and MUST be discarded after use and not stored or reused for any other purpose.</p>"},{"location":"encrypted_secret_key.html#algorithm_1","title":"Algorithm","text":"<p><code>ZBASE32_ENCODED</code> = <code>strip_and_check_prefix(ENCRYPTED_SECRET_KEY, \"mocryptsec0\")</code></p> <p><code>CONCATENATION</code> = <code>zbase32_decode(ZBASE32_ENCODED)</code></p> <p><code>VERSION_NUMBER_BYTE</code> = <code>CONCATENATION[0]</code></p> <p>Check that the <code>VERSION_NUMBER_BYTE</code> is 0x01 else fail.</p> <p><code>LOG_N_BYTE</code> = <code>CONCATENATION[1]</code></p> <p>Consider failing if this value is greater than 22 (which is compute excessive).</p> <p><code>SALT</code> = <code>CONCATENATION[2..18]</code></p> <p><code>XOR_OUTPUT</code> = <code>CONCATENATION[18..54]</code></p> <p><code>SYMMETRIC_KEY</code> = <code>scrypt(password=PASSWORD, salt=SALT, log_n=LOG_N_BYTE, r=8, p=1)</code></p> <p>The symmetric key output should be 36 bytes long (the <code>dkLen</code>). This symmetric encryption key is temporary and SHOULD be zeroed and MUST be discarded after use and not stored or reused for any other purpose.</p> <p><code>CHECKED_SECRET_KEY</code> = <code>xor(SYMMETRIC_KEY, XOR_OUTPUT)</code></p> <p>This value is temporary and SHOULD be zero and MUST be discarded after use and not stored or reused for any other purpose.</p> <p><code>RAND4</code> = <code>CHECKED_SECRET_KEY[32..36]</code></p> <p><code>RANDOMIZED_CHECKBYTES</code> = <code>CHECKED_SECRET_KEY[36..40]</code></p> <p><code>CHECKBYTES</code> = <code>xor(RAND4, RANDOMIZED_CHECKBYTES)</code></p> <p>Verify that these equal <code>[0xb9, 0x60, 0xa1, 0xe2]</code>. If not, presume the password was incorrect.</p> <p><code>SECRET_KEY</code> = <code>CHECKED_SECRET_KEY[0..32]</code></p>"},{"location":"facts.html","title":"Technical Facts","text":"<p>If you are seeking a quick answer to a technical question about Mosaic, this section may help you.</p> <p>Mosaic is a distributed <sup>rat</sup> and sovereign <sup>rat</sup> social application base-layer specification for the Internet.</p> <p>Mosaic is meant to be an underlying unopinionated layer. Your opinionated social media application rides on top. But we have to make some decisions at this layer, so we can't be entirely unopinionated.</p> <p>Applications are specified separately, but register an application ID with Mosaic (or they just choose one randomly). Two applications are defined within this spec: Mosaic Core and Mosaic Social Media.</p> <p>Whenever multiple options are available (such as transport), a core subset will be specified as required for compatibility.</p> <p>Mosaic uses a client-server <sup>rat</sup> protocol architecture. Records are simply stored and retrieved on select servers, there is no routing. Mosaic is fully capable of peer-to-peer deployments by having servers optionally run by peers (e.g. self-hosting).</p> <p>Mosaic does not provide IP privacy <sup>rat</sup> because this is an orthogonal concern that is easier to manage if it is decoupled from Mosaic and provided by a lower network layer, such as a VPN or Tor. But Mosaic should not interfere with IP privacy solutions.</p> <p>Mosaic runs over any duplex communication <sup>rat</sup> transport protocol that is TLS <sup>rat</sup> secured such as QUIC <sup>rat</sup> or TLS over TCP, but requires WebSockets at a minimum for interoperability.</p> <p>Mosaic users generate their own identities as digital signature cryptosystem keypairs and Mosaic uses a master-key subkey <sup>rat</sup> design.</p> <p>Mosaic servers have EdDSA ed25519 <sup>rat</sup> key-based server identites <sup>rat</sup>.</p> <p>Mosaic identity and endpoint information is bootstrapped from Mainline DHT <sup>rat</sup>.</p> <p>Mosaic records are encoded in a binary <sup>rat</sup> format within the protocol messages themselves. So are filters and protocol messages.</p> <p>Mosaic records are editable if the application layer wishes them to be, as all records have (and can be addressed by) a reusable address as well as a unique hash-based id.</p> <p>Timestamps <sup>rat</sup> account for leap seconds, have nanosecond accuracy, and extend out to year 2262.</p> <p>Clients and Servers remember the time that records are received <sup>rat</sup>.</p> <p>Mosaic is an offshoot of nostr.</p> <p>Mosaic uses the BLAKE3 <sup>rat</sup> hashing function.</p> <p>The name Mosaic was not chosen for any particular reason. It is just a name, easy to remember and pronounce. A throwback to the old NCSA Mosaic browser I suppose. It is not an acronym. We always capitalize it even in the middle of a sentence.</p>"},{"location":"filter.html","title":"Filter","text":"<p>A filter is a binary structure used within the Protocol messages.</p> <p>A filter consists of a sequence of filter elements.</p> <p>Each filter element restricts the set of records that the filter matches. For a record to pass a filter, it MUST pass every filter element in the filter except as excepted in the next paragraph.</p> <p>Most filter elements SHOULD be unique. If more than one filter element of a unique type exists, only the first one counts. Subsequent ones MUST be ignored.</p> <p>Some filter elements are narrow, meaning they select just a few records among many. Other filter elements are wide and select many or even most records. Filters SHOULD include at least one narrow filter element in order to narrow down the set of matching records to something reasonable. Software MAY reject filters that do not comply with this requirement. Narrow filter elements have a type number that has the top 4 bits clear (less than 0x80).</p> <p>Each filter element contains it's type in the first byte, and a length byte as it's second byte as a count of the number of 8-byte words, so multiply this by 8 to get the length of the filter element in bytes. This means that filter elements can be up to 2048 bytes long. If the length byte is 0, the filter is invalid and MUST be rejected.</p> <p>Filters can be up to 65536 bytes long maximum, but this size is not quite possible given other constraints.</p>"},{"location":"filter.html#filter-structure","title":"Filter Structure","text":"<p>It is defined as a simple header followed by a contiguous sequence of filter elements.</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |bytelen|          0x0          |\n 8  +-------------------------------+\n    | Filter Elements ...           |\n    +-------------------------------+\n</code></pre> <ul> <li><code>[0:2]</code> - The full byte length of the filter in little-endian. This MUST be              divisible by 8 since all filter elements are multiple of 8 in length.</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:]</code> - The contiguous sequence of filter elements</li> </ul> <p>The following filter elements are defined:</p> type name narrow unique 0x1 Author Keys yes yes 0x2 Signing Keys yes yes 0x3 Kinds yes yes 0x4 Timestamps yes yes 0x5 Included Tags yes no 0x80 Since no yes 0x81 Until no yes 0x82 Received Since no yes 0x83 Received Until no yes 0x84 Exclude no yes 0x85 Excluded Tags no no"},{"location":"filter.html#author-keys","title":"Author Keys","text":"<p>0x1</p> <p>Matches all records authored by any of these author keys.</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x1|len|      0x0              |\n 8  +-------------------------------+\n    | AUTHOR KEY 1/4                |\n 16 +-------------------------------+\n    | AUTHOR KEY 2/4                |\n 24 +-------------------------------+\n    | AUTHOR KEY 3/4                |\n 32 +-------------------------------+\n    | AUTHOR KEY 4/4                |\n 40 +-------------------------------+\n    | ... additional keys..         |\n    +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x1</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:]</code> - A sequence of 32-byte author public keys.</li> </ul>"},{"location":"filter.html#signing-keys","title":"Signing Keys","text":"<p>0x2</p> <p>Matches all records signed by any of these keys.</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x2|len|         0x0           |\n 8  +-------------------------------+\n    | SIGNING KEY 1/4               |\n 16 +-------------------------------+\n    | SIGNING KEY 2/4               |\n 24 +-------------------------------+\n    | SIGNING KEY 3/4               |\n 32 +-------------------------------+\n    | SIGNING KEY 4/4               |\n 40 +-------------------------------+\n    | ... additional keys..         |\n    +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x2</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:]</code> - A sequence of 32-byte signing public keys.</li> </ul>"},{"location":"filter.html#kinds","title":"Kinds","text":"<p>0x3</p> <p>Matches all records which are of any one of these kinds.</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x3|len|        0x0            |\n 8  +-------------------------------+\n    |  KIND ...                     |\n 16 +-------------------------------+\n    |  ... additional kinds ...     |\n    +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x3</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words.</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:]</code> - A sequence of <code>len-1</code> 8-byte kinds in little-endian format.</li> </ul>"},{"location":"filter.html#timestamps","title":"Timestamps","text":"<p>0x4</p> <p>Matches all records that have any of these exact timestamps. Typically used as part of address lookups.</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x4|len|        0x0            |\n 8  +-------------------------------+\n    |             TIMESTAMP         |\n 16 +-------------------------------+\n    |             TIMESTAMP         |\n 24 +-------------------------------+\n    | ...                           |\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x4</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:]</code> - A sequence of 8-byte fields, each being:<ul> <li><code>[0:8]</code> - An eight byte timestamp.</li> </ul> </li> </ul>"},{"location":"filter.html#included-tags","title":"Included Tags","text":"<p>0x5</p> <p>Matches all records that contain any of the given tags.</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x5|len|          0x0          |\n 8  +-------------------------------+\n    |   VALUE...  .                 |\n    +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x5</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:]</code> - A sequence of Tags.            This MUST be followed by padding that is all zeroes if the end            of the last tag does not hit a 64-bit boundary. When parsing,            reject anything less than 4 bytes, and if a parsed tag length            is zero (starts with two zero bytes) then consider it padding            rather than a tag.</li> </ul>"},{"location":"filter.html#since","title":"Since","text":"<p>0x80</p> <p>Matches all records with a timestamp greater than or equal to this value. <sup>rat</sup></p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x80|len|         0x0          |\n 8  +-------------------------------+\n    |         TIMESTAMP             |\n 16 +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x80</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:16]</code> - An eight byte timestamp.</li> </ul>"},{"location":"filter.html#until","title":"Until","text":"<p>0x81</p> <p>Matches all records with a timestamp less than or equal to this value. <sup>rat</sup></p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x81|len|         0x0          |\n 8  +-------------------------------+\n    |          TIMESTAMP            |\n 16 +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x81</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:16]</code> - An eight byte timestamp.</li> </ul>"},{"location":"filter.html#received-since","title":"Received Since","text":"<p>0x82</p> <p>Matches all records that were received by the server at or later than this value. <sup>rat</sup></p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x82|len|         0x0          |\n 8  +-------------------------------+\n    |          TIMESTAMP            |\n 16 +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x82</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:16]</code> - An eight byte timestamp.</li> </ul>"},{"location":"filter.html#received-until","title":"Received Until","text":"<p>0x83</p> <p>Matches all records that were received by the server at or before this value. <sup>rat</sup></p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x83|len|         0x0          |\n 8  +-------------------------------+\n    |         TIMESTAMP             |\n 16 +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x83</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:16]</code> - An eight byte timestamp.</li> </ul>"},{"location":"filter.html#exclude","title":"Exclude","text":"<p>0x84</p> <p>Excludes all records with the given IDs</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x84|len|        0x0           |\n 8  +-------------------------------+\n    |    ID prefix bytes 0..8       |\n16  +-------------------------------+\n    |    ID prefix bytes 8..16      |\n24  +-------------------------------+\n    |    ID prefix bytes 16..24     |\n32  +-------------------------------+\n    |    ID prefix bytes 24..32     |\n40  +-------------------------------+\n    | ... additional references     |\n    +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x84</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:]</code> - A sequence of 32-byte ID prefixes.</li> </ul>"},{"location":"filter.html#excluded-tags","title":"Excluded Tags","text":"<p>0x85</p> <p>Matches all records that do NOT contain any of the given tags.</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    |0x85|len|          0x0         |\n 8  +-------------------------------+\n    |   VALUE...  .                 |\n    +-------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x85</li> <li><code>[1:2]</code> - The length of the filter element in 8-byte words</li> <li><code>[2:8]</code> - Zeroed</li> <li><code>[8:]</code> - A sequence of Tags.            This MUST be followed by padding that is all zeroes if the end            of the last tag does not hit a 64-bit boundary. When parsing,            reject anything less than 4 bytes, and if a parsed tag length            is zero (starts with two zero bytes) then consider it padding            rather than a tag.</li> </ul>"},{"location":"friends.html","title":"Friends","text":"<p>TBD</p>"},{"location":"front.html","title":"Front Matter","text":"<p>Mosaic is a work in progress.  This specification is incomplete and an early draft.</p> <p>NOTE: When you see a superscript <sup>rat</sup>, the \"rat\" is a link to the rationale behind this. Rationale is kept so we can remember why decisions were made, but kept separate to not clutter the specification.</p>"},{"location":"human_encodings.html","title":"Mosaic Human Encodings","text":"<p>Human encodings are defined to provide uniform compatible ways for sharing data between humans and software.</p> <p>NOTICE: I'm considering switching this to an encoding that includes a checksum. zbase32 does not (bech32 does). I defined a new one, hum32, but I'm still conflicted about it.</p> <p>zbase32 is used for human-oriented rendering of binary data.</p> <p>Prefixes are used to specify the type of data being represented:</p> Data prefix public key, user mopub0 public key, server mosrv0 secret key mosec0 encrypted secret key mocryptsec0 References moref0 Records morecord0"},{"location":"human_readable_content.html","title":"Human Readable Content","text":"<p>Records kinds which contain payloads of human readable content work as follows.</p> <p>The payload MUST be a valid UTF-8 encoded string.</p> <p>Any part of the intended content that is meant to have machine-readable meaning MUST NOT be in the payload, but instead specified in a content segment tag, which indicates the kind of content, the character (not byte) offset into the payload where this content SHOULD be rendered, and the value of the content.  Multiple kinds of content segment tags are defined including:</p> <ul> <li>Content Segment: User Mention for things like <code>@user</code>.</li> <li>Content Segment: Server Mention for mentioning a server.</li> <li>Content Segment: Quote for quoting other records.</li> <li>Content Segment: URL for inserting a URL to a website.</li> <li>Content Segment: Image for inserting an image.</li> <li>Content Segment: Video for inserting a video.</li> </ul>"},{"location":"identity.html","title":"Identity","text":""},{"location":"identity.html#sovereign-identity","title":"Sovereign Identity","text":"<p>Identities in Mosaic are self-created and self-administered. This requires each end user and server to securely manage their secret key material. Convenient methods for doing so are outside of the scope of Mosaic.</p> <p>An identity is defined to be the entity with knowledge of the secret half of an EdDSA keypair.</p> <p>This identifying keypair is considered their master keypair.</p> <p>An entity (user or server) is referenced by the public half of their master keypair.</p>"},{"location":"identity.html#server-identities","title":"Server Identities","text":"<p>In Mosaic, servers have identities similar to how users have identities.</p>"},{"location":"identity.html#master-keys-and-subkeys","title":"Master keys and Subkeys","text":"<p>Users MAY have subsidiary public keys, known as subkeys, signing keys or device keys (these terms being mostly functionally interchangeable).</p> <p>The purpose of subkeys is primarily to facilitate online usage in less secure environments without risking exposure of the master key secret, where compromise and revocation do not invalidate the master key identity that the user is known by.</p> <p>Subkeys also support alternative algorithms, such as X25519 public keys for receiving encrypted information, or secp256k1 keys for backwards compatibility with nostr.</p> <p>Users publish their subkeys in a key schedule record, defined within the core application.</p> <p>A limited number of low-frequency operations in Mosaic require a signature from the master key. These include (presently):</p> <ul> <li>Publishing/modifying a User Bootstrap listing their servers (or   a Server Bootstrap listing it's endpoints)</li> <li>Publishing/modifying a user's Key Schedule with new keys and/or revocations.</li> <li>Publishing/modifying a user's Profile record.</li> </ul> <p>NOTE: Nothing in the Mosaic spec requires that subkeys are deterministically derived from the master secret key. How subkeys are generated is out of scope.</p>"},{"location":"identity.html#rollover-and-revocation","title":"Rollover and Revocation","text":"<p>Subkeys can be rolled over (marked \"out of use\") or revoked. Revocation can apply from a particular timestamp, or it can cover all records signed with the keypair.</p> <p>See Key Schedule for more details.</p> <p>The use of a key schedule record by servers is not yet specified and yet to be worked out. For the moment, servers should use their master key directly.</p> <p>Currently master keys cannot be revoked, and loss of a master key is catastrophic.</p>"},{"location":"keyschedule.html","title":"Key Schedule (kind)","text":"<p>A Key Schedule record lists subkey information and revocation information for a master key.</p> <p>A Key Schedule record MUST be considered invalid if it does not conform to this specification.</p> <p>A Key Schedule record MUST be considered invalid if the signing key and the master key are not identical.</p>"},{"location":"keyschedule.html#kind","title":"Kind","text":"<p>Applicaton: 0 (Mosaic Core)</p> <p>App Kind: 1 (Key Schedule)</p> <p>Flags: 0x0003 = Replaceable, Everybody, NotPrintable</p> <p>Reprsentation = 0x0000_0000_0001_000e</p>"},{"location":"keyschedule.html#tags","title":"Tags","text":"<p>Every subkey listed in a key schedule record MUST have an associated subkey tag listing the subkey.</p>"},{"location":"keyschedule.html#payload","title":"Payload","text":"<p>The payload is not human readable.</p> <p>The payload contains a sequence of 40-byte subkey records laid out as follows:</p> <pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n 0  +-------------------------------+\n    | SUBKEY    1/4                 |\n 8  +-------------------------------+\n    | SUBKEY    2/4                 |\n 16 +-------------------------------+\n    | SUBKEY    3/4                 |\n 24 +-------------------------------+\n    | SUBKEY    4/4                 |\n 32 +-------------------------------+\n    |MARKER |   RESERVED            |\n 40 +-------------------------------+\n    |        REVOC TIMESTAMP        |\n    +-------------------------------+\n</code></pre> <p><code>[0:32]</code> - SUBKEY is the 32-byte subkey</p> <p><code>[32:34]</code> - MARKER is 2-bytes and is one of the following</p> <ul> <li>0x0 - ACTIVE_SIGNING_KEY - A Mosaic ed25519 signing key (subkey) in current use</li> <li>0x1 - ACTIVE_ENCRYPTION_KEY - A Mosaic X25519 encryption key in current use<ul> <li>These keys are used for receiving encrypted data only, not for signing.</li> <li>Generally the secretkey for encryption is distributed to every device   that needs the ability to view encrypted data. Being a separate subkey   from the signing keys, it limits the damage from compromise.</li> </ul> </li> <li>0x40 - REVOKED_ALL - All records signed by the key are to be considered   invalid.</li> <li>0x41 - REVOKED_PAST - Records signed by the key that were received prior to   the revocation timestamp (based on when it was received by software and NOT   based on the date inside of the record) are still considered valid; however,   records either received after the revocation timestamp, or with a timestamp   after the revocation timestamp, are considered invalid.</li> <li>0x4F - OUT_OF_USE - Key is no longer in use (but nothing is revoked). This   MAY be used for signing keys or encryption keys.</li> <li>0x80 - ACTIVE_NOSTR_KEY - A nostr secp256k1 subkey<ul> <li>This helps support dual-stack software that works with both nostr and   Mosaic.</li> </ul> </li> </ul> <p><code>[34:40]</code> - Bytes 34:40 are reserved and MUST be 0.</p> <p><code>[40:48]</code> - REVOC TIMESTAMP is 8-bytes and is in the format described in timestamps. Timestamp is required for REVOKED ALL and REVOKED PAST.  Timestamp is suggested for OUT_OF_USE. Timestamp SHOULD be zeroed in all other cases.</p>"},{"location":"keyschedule.html#server-used","title":"Server Used","text":"<p>These are posted to all of the author's Outbox servers.</p>"},{"location":"kind.html","title":"Kind","text":"<p>The kind of a record determines the application that the record is used by. This also determines the nature of the payload.</p> <p>Kinds are represented by an array of 8 bytes, equivalent to a 64-bit unsigned integer in big endian format.</p> <p>A kind can be broken into three parts:</p> Range Meaning Byte 0-3 Application Identifier, 32-bit unsigned integer in big-endian format Byte 4-5 Application-Specific Kind, 16-bit unsigned integer in big-endian format Byte 6-7 Bitflags for record handling <p>Bitflags are as follows:</p> <p>Bits 1 and 0:</p> <ul> <li>00 - <code>Unique</code>. All records SHOULD have unique addresses. In the case that multiple        records share the same address, all of them MUST be preserved just like        Versioned records are (see bits 11 below)</li> <li>01 - <code>Ephemeral</code>; Servers MUST serve this record to current subscribers, but        SHOULD NOT save the record nor serve it later to future subscribers.</li> <li>10 - <code>Replaceable</code>: Among records with the same address, only the one with the        latest timestamp MUST be served by servers, and prior records MUST NOT be        served.</li> <li>11 - <code>Versioned</code>: Among records with the same address, all of them remain relevant        and should be seen as a version history.</li> </ul> <p>Bits 3 and 2:</p> <ul> <li>00 - <code>Author Only</code>: Servers MUST serve this record only to it's author.</li> <li>01 - <code>Author + Tagged</code>: Servers MUST serve this record only to it's author and the        public keys that are tagged in the record.</li> <li>10 - RESERVED</li> <li>11 - <code>Everybody</code>: Servers MAY serve this record to anybody.</li> </ul> <p>Bit 4: If on, the contents of this record are considered to be <code>printable</code> (human readable).</p> <p>Bits 15-5: RESERVED and MUST be 0</p>"},{"location":"kinds.html","title":"Kinds Registry","text":"<p>This only covers Mosaic Core and Mosaic Social Media. Other applications should define their internal kinds within their own specifications, and simply register an Application ID with Mosaic.</p> App App Kind Name Flags Server Used Core 1 Key Schedule Replace, All, NoPrint Author Outbox Core 2 Profile Replace, All, NoPrint Author Outbox Social Media 1 Microblog Root Unique, All, Print Author Outbox Social Media 2 Reply Comment Unique, All, Print Author OutboxParent Author Inbox Social Media 3 Blog Post Unique, All, Print Author Outbox Social Media 4 Chat Message Unique, All, Print Chat Server"},{"location":"messages.html","title":"Protocol messages","text":"<p>Protocol message are not separately digitally signed due to the TLS transport and certificate authentication.</p> <p>All protocol messages start with the same 4 byte sequence consisting of one byte for the type, and three bytes for the full byte length of the entire protocol message encoded in little-endian format. This allows the protocol to be easily framed within a stream.</p>"},{"location":"messages.html#protocol-extensions","title":"Protocol Extensions","text":"<p>Protocol extension negotiation is done on a transport-by-transport level. For QUIC transport this is done with the initial packet. For WebSockets transport this is done with the <code>X-Mosaic-Extensions</code> header. See the specific transport.</p> <p>The following extensions have been defined:</p> <ul> <li>Sync</li> </ul>"},{"location":"messages.html#asynchronous","title":"Asynchronous","text":"<p>All client messages initiate an action, and all server messages are in response to client messages (NOTE: this MAY not apply to Mosaic extensions). Yet messaging is asychronous and both sides SHOULD be prepared to deal with a message sent at any time.</p> <p>Servers SHOULD not send messages until they receive a message that requires a response.</p> <p>If a server fails to receive a message from a client that does not have an open query or submission within a reasonable timeframe, it MAY close the connection.</p> <p>If a client receives a server message that was not expected, it MUST ignore it and decide what to do next. In some cases, clients MAY close the connection because the service they were seeking failed. In other cases they MAY try something else. There is no provision for a client to alert a server of an error.</p>"},{"location":"messages.html#messages","title":"Messages","text":"<p>Every message starts with a one-byte type, shown below in the header of each type. Following this is the data of the message.</p> Initiator Message Type Client Hello 0x10 Client Hello Auth 0x11 Client Get 0x1 Client Query 0x2 Client Subscribe 0x3 Client Unsubscribe 0x4 Client Submission 0x5 Client DHTLookup 0x6 Server Hello Ack 0x90 Server Record 0x80 Server Locally Complete 0x81 Server Query Closed 0x82 Server Submission Result 0x83 Server DHTResponse 0x84 Either Unrecognized 0xF0"},{"location":"messages.html#client-messages","title":"Client Messages","text":""},{"location":"messages.html#hello","title":"Hello","text":"<p>NOTE: WebSockets sends HELLO information out of band and does not utilize this message.</p> <p>This is the initial message sent from the client to the server. It specifies the highest Mosaic version that the client supports, as well as the applications that the client is requesting to utilize.</p> <p>It has the following format:</p> <pre><code>\n    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x10|     LENGTH      | MOSAIC_MAJOR_VERSION  |\n 8  +-----------------------------------------------+\n    | APP_ID                | ...                   |\n    +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x10</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:8]</code> - The highest Mosaic major version number that the client supports, in little-endian format</li> <li><code>[*]</code> - A sequence of 32-bit Application IDs that the client wishes to use, in little-endian format</li> </ul> <p>This is a client initiated message. Servers are expected to reply with Hello Ack.</p>"},{"location":"messages.html#hello-auth","title":"Hello Auth","text":"<p>Only WebSockets utilizes this message. QUIC and TCP handle authentication at the TLS layer.</p> <p>TBD</p>"},{"location":"messages.html#get","title":"Get","text":"<p>This is a query for specific records.</p> <p>It has the following format:</p> <pre><code>\n    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x1 |     LENGTH      | QUERY_ID  |   0x0     |\n 8  +-----------------------------------------------+\n    | Mixed IDs or ADDRs, each one 48 bytes long... |\n    | ...                                           |\n    +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x1</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:6]</code> - <code>QUERY_ID</code>, two bytes which SHOULD be made up by the client and   used to associate returned <code>Record</code> responses to this request.</li> <li><code>[6:8]</code> - Zeroed</li> <li><code>[*]</code> - A sequence of mixed IDs and ADDRs.  Note that ADDRs start   with a 1 bit, whereas IDs start with a 0 bit, and both of them are 48   bytes long.</li> </ul> <p>This is a client initiated message. Servers are expected to reply with:</p> <ul> <li>A series of zero or more <code>Record</code> messages representing all   the matched records on the server, followed by a   <code>Query Closed</code> message.</li> </ul>"},{"location":"messages.html#query","title":"Query","text":"<p>This is a query for records that closes once served.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x2 |     LENGTH      | QUERY_ID  |  LIMIT    |\n 8  +-----------------------------------------------+\n    | FILTER ...                                    |\n    | ...                                           |\n    +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x2</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:6]</code> - <code>QUERY_ID</code> two bytes which SHOULD be made up by the client and used   to associate returned <code>Record</code> responses to this request.</li> <li><code>[6:8]</code> - <code>LIMIT</code>, an unsigned integer in little-endian format, specifies   the maximum number of responses that the client wishes to receive.  A value   of 0 indicates unlimited.</li> <li><code>[*]</code> - The <code>FILTER</code>, see Filter.</li> </ul> <p>This is a client initiated message. Servers are expected to reply with:</p> <ul> <li>a series of zero or more <code>Record</code> messages representing all   the matching records on the server initially, followed by   a <code>Query Closed</code> message.</li> </ul> <p>Queries MUST return results in anti-chronological order, from most recent backwards.</p>"},{"location":"messages.html#subscribe","title":"Subscribe","text":"<p>This is a query for records that is kept open after the initial records are served so that newly arriving records that match can be sent to the client immediately.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x3 |     LENGTH      | QUERY_ID  |   LIMIT   |\n 8  +-----------------------------------------------+\n    | FILTER ...                                    |\n    | ...                                           |\n    +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x3</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:6]</code> - <code>QUERY_ID</code>, two bytes which SHOULD be made up by the client and   used to associate returned <code>Record</code> responses to this request.</li> <li><code>[6:8]</code> - <code>LIMIT</code>, an unsigned integer in little-endian format, specifies   the maximum number of responses that the client wishes to receive.  A value   of 0 indicates unlimited.</li> <li><code>[*]</code> - The <code>FILTER</code>, see Filter.</li> </ul> <p>This is a client initiated message. Servers are expected to reply with:</p> <ul> <li>a series of zero or more <code>Record</code> messages representing all   the matching records on the server initially, followed by   a <code>Locally Complete</code> message, potentially followed by   zero or   more <code>Record</code> messages that flow in to the server after   the initial response (so long as the query is still open), or</li> <li>a <code>Query Closed</code> message if the query could not be served.</li> </ul> <p>Queries MUST return results in anti-chronological order, from most recent backwards.</p>"},{"location":"messages.html#unsubscribe","title":"Unsubscribe","text":"<p>This is a client request to close an open subscription query.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x4 |     LENGTH      | QUERY_ID  |   0x0     |\n 8  +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x3</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:6]</code> - <code>QUERY_ID</code>, two bytes indicating which query SHOULD be closed.</li> <li><code>[4:8]</code> - Zeroed</li> </ul> <p>This is a client initiated message. Servers are expected to reply with:</p> <ul> <li><code>Query Closed</code></li> </ul>"},{"location":"messages.html#submission","title":"Submission","text":"<p>This is the submission of a record.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x5 |    LENGTH       |          0x0          |\n 8  +-----------------------------------------------+\n    | RECORD ...                                    |\n    | ...                                           |\n    +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x5</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:8]</code> - Zeroed</li> <li><code>[*]</code> - <code>RECORD</code> is the record submitted</li> </ul> <p>This is a client initiated message. Servers are expected to reply with:</p> <ul> <li><code>Submission Result</code> with an id prefix matching the record.</li> </ul>"},{"location":"messages.html#dht-lookup","title":"DHT Lookup","text":"<p>Browser-based JavaScript clients cannot do DHT lookups. This requests that the server perform a DHT lookup on behalf of the client</p> <p>TBD</p>"},{"location":"messages.html#server-messages","title":"Server Messages","text":""},{"location":"messages.html#hello-ack","title":"Hello Ack","text":"<p>NOTE: WebSockets sends HELLO ACK information out of band and does not utilize this message.</p> <p>This is a reply to the client <code>Hello</code> message. It includes the highest Mosaic version that both parties support, as well as all of the application IDs that the client requested which the server can support.</p> <p>It has the following format:</p> <pre><code>\n    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x90|     LENGTH      | MOSAIC_MAJOR_VERSION  |\n 8  +-----------------------------------------------+\n    | APP_ID                | ...                   |\n    +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x90</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:8]</code> - The highest Mosaic major version number that both the server and the client supports, in little-endian format</li> <li><code>[*]</code> - A sequence of 32-bit Application IDs that the client requested and that the server can also support, in little-endian format</li> </ul>"},{"location":"messages.html#record","title":"Record","text":"<p>This is a record returned from a query.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x80|     LENGTH      | QUERY_ID  |   0x0     |\n 8  +-----------------------------------------------+\n    | RECORD ...                                    |\n    | ...                                           |\n    +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x80</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:6]</code> - <code>QUERY_ID</code> indicates the client query that this record matched.</li> <li><code>[6:8]</code> - Zeroed</li> <li><code>[*]</code> - <code>RECORD</code> is the returned record.</li> </ul> <p>This is a server response message in response to <code>Get</code> or <code>Query</code> or <code>Subscribe</code>.</p>"},{"location":"messages.html#locally-complete","title":"Locally Complete","text":"<p>This is a message indicating that a query has served all matching local records, but remains open to serve matching records that subsequently arrive.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x81|     LENGTH      |  QUERY_ID |    0x0    |\n 8  +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x81</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:6]</code> - <code>QUERY_ID</code> indicates the client query that is now locally complete.</li> <li><code>[6:8]</code> - zeroed</li> </ul> <p>This is a server response message in response to <code>Subscribe</code>.</p>"},{"location":"messages.html#query-closed","title":"Query Closed","text":"<p>This is a message indicating that a query has been closed.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x82|     LENGTH      |  QUERY_ID | CODE| 0x0 |\n 8  +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x82</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:6]</code> - <code>QUERY_ID</code> indicates the client query that is now closed.</li> <li><code>[6:7]</code> - <code>CODE</code> indicates the reason for closure from among the   following defined reasons:<ul> <li><code>ON_REQUEST</code>: 0x1 - Query was closed in response to an <code>Unsubscribe</code> request</li> <li><code>REJECTED_INVALID</code>: 0x10 - Query is invalid</li> <li><code>REJECTED_TOO_OPEN</code>: 0x11 - Query is too broad, matching too many records</li> <li><code>REJECTED_TOO_FAST</code>: 0x12 - Queries (or messages) are coming too quickly. Slow down</li> <li><code>REJECTED_TEMP_BANNED</code>: 0x13 - Client is temporarily banned from querying</li> <li><code>REJECTED_PERM_BANNED</code>: 0x14 - Client is permanently banned from querying</li> <li><code>SHUTTING_DOWN</code>: 0x30 - The server is shutting down</li> <li><code>INTERNAL_ERROR</code>: 0xF0 - The server has encountered an internal error</li> <li><code>OTHER</code>: 0xFF - Other reason, or not specified</li> </ul> </li> <li><code>[7:8]</code> - zero</li> </ul>"},{"location":"messages.html#submission-result","title":"Submission Result","text":"<p>This is a message returning the result of a Submission.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0x83|     LENGTH      |CODE |      0x0        |\n 8  +-----------------------------------------------+\n    | ID PREFIX bytes 0..8                          |\n16  +-----------------------------------------------+\n    | ID PREFIX bytes 8..16                         |\n24  +-----------------------------------------------+\n    | ID PREFIX bytes 16..24                        |\n32  +-----------------------------------------------+\n    | ID PREFIX bytes 24..32                        |\n40  +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0x83</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:5]</code> - <code>CODE</code> which indicates the result of the submission from among the   following defined results:<ul> <li><code>OK</code>: 0x1 - Record submission was accepted</li> <li><code>DUPLICATE</code>: 0x2 - Record is a duplicate. Servers MAY use this or   they MAY use <code>OK</code> in the same circumstance.</li> <li><code>NO_CONSUMERS</code>: 0x3 - Ephemeral record had no consumers. Servers MAY use this or   they MAY use <code>OK</code> in the same circumstance.</li> <li><code>REJECTED_INVALID</code>: 0x10 - Record is invalid</li> <li><code>REJECTED_TOO_FAST</code>: 0x12 - Submissions (or messages) are coming too quickly. Slow down.</li> <li><code>REJECTED_TEMP_BANNED</code>: 0x13 - Client is temporarily banned from submisisons.</li> <li><code>REJECTED_PERM_BANNED</code>: 0x14 - Client is permanently banned from submissions.</li> <li><code>REJECTED_REQUIRES_AUTHN</code>: 0x15 - Submission requires authentication.</li> <li><code>REJECTED_REQUIRES_AUTHZ</code>: 0x16 - Submission requires authorization.</li> <li><code>INTERNAL_ERROR</code>: 0xF0 - The server has encountered an internal error</li> <li><code>OTHER</code>: 0xFF - Other reason, or not specified</li> </ul> </li> <li><code>[5:8]</code> - Zeroed</li> <li><code>[8:40]</code> - A 32-byte prefix of the 48-byte Id.</li> </ul>"},{"location":"messages.html#dht-response","title":"DHT Response","text":"<p>This is a server response to a <code>DHTLookup</code> request.</p> <p>TBD</p>"},{"location":"messages.html#unrecognized","title":"Unrecognized","text":"<p>This is a message indicating that the last message from the peer was not recognized.</p> <p>When this is received over QUIC transport, the stream SHOULD be closed and further messaging can occur on other streams.</p> <p>It has the following format:</p> <pre><code>    0     1     2     3     4     5     6     7     8\n 0  +-----------------------------------------------+\n    | 0xF0|     LENGTH      |         0x0           |\n 8  +-----------------------------------------------+\n</code></pre> <ul> <li><code>[0:1]</code> - The type 0xF0</li> <li><code>[1:4]</code> - The byte length of this message, in little-endian format</li> <li><code>[4:8]</code> - Zeroed</li> </ul>"},{"location":"microblog.html","title":"Microblog Root (kind)","text":""},{"location":"microblog.html#kind","title":"Kind","text":"<p>Applicaton: 1 (Mosaic Social Media)</p> <p>App Kind: 1 (Microblog Root)</p> <p>Flags: 0x001c = Unique, Everybody, Printable</p> <p>Representation = 0x0000_0001_0001_001c</p>"},{"location":"microblog.html#tags","title":"Tags","text":"<p>No special tags are defined here, but most core tags apply.</p>"},{"location":"microblog.html#payload","title":"Payload","text":"<p>The payload follows the Human Readable Content rules.</p>"},{"location":"microblog.html#flags","title":"Flags","text":"<p>There are no special flag restrictions.</p>"},{"location":"microblog.html#server-used","title":"Server Used","text":"<p>These are posted to all of the author's Outbox servers.</p>"},{"location":"network.html","title":"Network Architecture","text":""},{"location":"network.html#clients","title":"Clients","text":"<p>Mosaic clients are meant to serve users, and thus sit on user-operated notes, often phones or desktops or laptops. They may be behind a NAT gateways, or indeed multiple layers of NAT gateways. Mosaic clients initiate connections to servers, and never the reverse.</p>"},{"location":"network.html#servers","title":"Servers","text":"<p>Mosaic servers are meant to remain online and reliable, and SHOULD be accessible from the broader Internet.</p> <p>Servers not accessible from the broader Internet, either because they are behind NAT gateways, or because they operate from a Tor onion site domain, are NOT suitable for inbox, outbox or encryption roles, but they MAY serve other applications.</p>"},{"location":"network.html#server-roles","title":"Server Roles","text":"<p>Servers fulfilling certain kinds of roles must meet the requirements of those roles. Servers can (and often do) serve many or even all server roles.</p>"},{"location":"network.html#outbox","title":"Outbox","text":"<p>Outbox servers are where users publish public records meant to be read by anyone who wishes to.</p> <p>Servers fulfilling an Outbox role are subject to the following:</p> <ul> <li>They MUST be broadly accessible from the Internet, not behind NAT, and not running   from a Tor onion site.</li> <li>They SHOULD have a high level of uptime.</li> <li>They MUST accept messages from the users that they are serving, except where abuse prevention   is concerned.</li> <li>They MUST deliver such messages to anybody who requests them without requiring   authentication and without requiring payment.</li> </ul>"},{"location":"network.html#inbox","title":"Inbox","text":"<p>Inbox servers are where users receive records that reference them, and where other users can follow replies to the user's messages which are posted here by other people.</p> <p>Servers fulfilling an Inbox role are subject to the following:</p> <ul> <li>They MUST be broadly accessible from the Internet, not behind NAT, and not running   from a Tor onion site.</li> <li>They SHOULD have a high level of uptime.</li> <li>They MUST accept messages from strangers, except where abuse prevention is concerned,   without requiring authentication and without requiring payment.</li> <li>They MUST serve messages to the intended recpients after requiring authentication.</li> <li>They SHOULD serve messages to anybody without requiring authentication and without requiring   payment.</li> <li>They MAY withhold serving messages prior to abuse prevention and moderation.</li> </ul>"},{"location":"network.html#encryption","title":"Encryption","text":"<p>Encryption servers function like inbox servers but handle private encrypted messages (defined outside of Mosaic core) that only the user can read back.</p> <p>Servers fulfilling an Encryption role are subject to the following:</p> <ul> <li>They MUST be broadly accessible from the Internet, not behind NAT, and not running   from a Tor onion site.</li> <li>They SHOULD have a high level of uptime.</li> <li>They MUST accept messages from strangers, except where abuse prevention is concerned,   without requiring authentication and without requiring payment.</li> <li>They MUST serve messages to the intended recpients after requiring authentication.</li> <li>They MUST NOT deliver messages to anybody other than the indended recipient.</li> </ul>"},{"location":"notation.html","title":"Notation","text":""},{"location":"notation.html#rationale-links","title":"Rationale links","text":"<p>When you see a superscript <sup>rat</sup>, the \"rat\" is a link to the rationale behind this. Rationale is kept so we can remember why decisions were made, but kept separate to not clutter the specification.</p>"},{"location":"notation.html#must-should-and-may","title":"MUST, SHOULD, and MAY","text":"<p>The capitalized words \"MUST\", \"REQUIRED\", \"SHALL\", \"MUST NOT\" and \"SHALL NOT\" indicate an absolute requirement in order to be in compliance with this specification, and violation means the software does not comply with the Mosaic specification.</p> <p>The capitalized words \"SHOULD\", \"SHOULD NOT\", and \"RECOMMENDED\" indicate strong advice for the default case, but there may be valid exceptions and software that does otherwise is not in violation of the specification.</p> <p>The capitalized words \"MAY\" and \"OPTIONAL\" indicate a choice that is truly optional.</p> <p>These definitions are differently worded, but are not meant to be functionally different from rfc2119.</p>"},{"location":"notation.html#byte-slice-notation","title":"Byte Slice Notation","text":"<p>Byte slice notation <code>[m:n]</code> indicates the bytes including <code>m</code> up to and including the byte <code>n-1</code> but not including the byte <code>n</code>. For example <code>[8:12]</code> represents bytes 8, 9, 10 and 11.</p> <p>Byte slices that are missing a beginning such as <code>[:64]</code> start at 0.</p> <p>Byte slices that are missing an ending such as <code>[112:]</code> continue until the end of the data.</p>"},{"location":"principles.html","title":"Principles of Design","text":""},{"location":"principles.html#principles-of-design_1","title":"Principles of Design","text":"<ul> <li>The protocol must be simple enough for multiple implementations to   be developed, but simplicity is not the only factor.</li> <li>The protocol must be functional enough to support a wide range of   applications beyond just social media.</li> <li>The protocol should not impede high-performance high-throughput   implementations.</li> <li>It is ok to do things multiple ways if there are very compelling reasons to   do so. Every additional way to do something that is required to be supported   by all software thus further burdens all software, and that cost must be   well justified.</li> <li>Code that isn't required by everybody should be defined outside of the   core specification.</li> </ul> <p>Rationale used for various decisions is available in an appendix.</p>"},{"location":"profile.html","title":"Profile (kind)","text":"<p>A profile record contains user profile information.</p> <p>A profile record MUST be considered invalid if the signing key and the master key are not identical.</p>"},{"location":"profile.html#kind","title":"Kind","text":"<p>Applicaton: 0 (Mosaic Core)</p> <p>App Kind: 2 (Profile)</p> <p>Flags: 0x000e = Replaceable, Everybody, NotPrintable</p> <p>Representation = 0x0000_0000_0002_000e</p>"},{"location":"profile.html#tags","title":"Tags","text":"<p>No specific tags are defined.</p>"},{"location":"profile.html#payload","title":"Payload","text":"<p>Payload is a CBOR map. All field names are snake-case.</p> <p>The field <code>name</code> is REQUIRED. All other fields are OPTIONAL.</p> <p>The following fields are available:</p> <ul> <li><code>name</code> - (REQUIRED) this is the user's name, used for <code>@name</code> tagging,   containing only typeable ASCII characters. These cannot be guaranteed   to be unique. Users are encouraged to choose names that are uncommon   if not unique. Clients are encouraged to provide a way for users to   disambiguate name collisions such as via a   Petname system,   which is out of scope of this specification.</li> <li><code>display_name</code> - this is a name for display purposes which can contain   any sort of UTF-8 character. Clients are encouraged to also display   <code>name</code> so that users can tag them with <code>@name</code> syntax.</li> <li><code>about</code> - This is prose where the user can describe themself.</li> <li><code>avatar</code> - This is a URL to an avatar (e.g. a profile picture) in a   standard format (PNG, JPEG, SVG, WebP, GIF, BMP or ICO) expected to be   dimensionally square and no bigger than 512x512.</li> <li><code>website</code> - This is a URL to the user's website.</li> <li><code>banner</code> - This is a URL to a background picture in a standard format   (PNG, JPEG, SVG, WebP, GIF, BMP or ICO) expected to be of size 1024x768</li> <li><code>org</code> - A boolean designating that this profile represents an organisation</li> <li><code>bot</code> - A boolean designating that this profile is a bot</li> <li><code>lud16</code> - This is a lightning payment address   defined by LUD-16</li> </ul> <p>Additional fields MAY be used.</p>"},{"location":"profile.html#flags","title":"Flags","text":"<p>There are no special flag restrictions.</p>"},{"location":"profile.html#server-used","title":"Server Used","text":"<p>These are posted to all of the author's Outbox servers.</p>"},{"location":"protocol.html","title":"Protocol","text":"<p>Clients always contact servers. Therefore the initial message always comes from a client.</p> <p>Specific encodings depend on the transport. Refer to the transport for details:</p> <ul> <li>QUIC</li> <li>TCP</li> <li>WebSockets</li> </ul>"},{"location":"protocol.html#hello","title":"HELLO","text":"<p>The HELLO message includes the following information:</p> <ul> <li>The major protocol versions supported by the client</li> <li>The application features supported by and requested by the client</li> <li>A nonce for the server to sign as part of server authentication</li> <li>Whether the client wishes to authenticate, and if so, the client user's public key.</li> </ul>"},{"location":"protocol.html#hello-ack","title":"HELLO ACK","text":"<p>In response to the HELLO information, the server next responds with HELLO ACK information which includes the following information:</p> <ul> <li>The major protocol version to use</li> <li>The application features to use</li> <li>The nonce in HELLO signed by the server keypair</li> <li>If the client requested to authenticate, a nonce to challenge the client. In this case,   the HELLO AUTH message is required from the client next.</li> <li>An optional service URL presented to clients.   Servers MAY present a service URL for a website which users can visit in   order to manage their relationship with the server (e.g. sign up for an   account, make payment, view logs, or anything else that is relevant to   that relationship). These kinds of activities are not standardized here.</li> </ul>"},{"location":"protocol.html#hello-auth","title":"HELLO AUTH","text":"<p>In case a HELLO AUTH is needed to complete client authentication, it includes the following information:</p> <ul> <li>The nonce in HELLO ACK signed by the client keypair</li> </ul>"},{"location":"protocol.html#subsequent-messages","title":"Subsequent messages","text":"<p>After this point, all further communication is client-initiated. See Messages for details.</p>"},{"location":"quic.html","title":"Mosaic over QUIC","text":""},{"location":"quic.html#when-to-choose-quic","title":"When to choose QUIC","text":"<p>The QUIC transport is the highest performance option. Most significantly, QUIC has fewer roundtrips by design. But it also head-of-line blocking, has optional out-of-order delivery (Mosaic does not utilize this), and supports multiplexing. It also maintains connections when clients switch networks, for example when mobile phones switch from WiFi to 4G.</p> <p>QUIC cannot be used by browser-based clients. Browser-based clients must use the WebSockets transport.</p> <p>QUIC cannot be used over Tor. Privacy-conscious users may prefer to use the TCP transport over Tor.</p>"},{"location":"quic.html#quic-reference","title":"QUIC reference","text":"<p>See the QUIC RFC.</p>"},{"location":"quic.html#tls","title":"TLS","text":"<p>Over QUIC, Mosaic MUST use TLS version at least 1.3 as required by QUIC.</p> <p>TLS MUST specify the EdDSA signature algorithm, using the ed25519 signing keys.</p> <p>TLS certificates SHALL be either RawPublicKey or self-signed, and use the ed25519 public key (either the server's master public key or the client's signing public key).</p> <p>Servers SHOULD request client-side certificates if they wish to authenticate users. If clients do not provide certificates, they are to be considered anonymous. Servers MAY present different services depending on whether a user is authenticated or not.</p> <p>The self-signed certificate distinguished name hostname MUST be \"mosaic\".</p> <p>Server-side certificates are REQUIRED and authenticate the server to the client. These MUST use the ED25519 signature scheme and certificate verifier. The certificate verifier MUST accept self-signed certificates if they are validly signed by the public key within, and interpret that public key to be the Mosaic key of the server.</p> <p>Client-side certificates are OPTIONAL and authenticate the client to the server. These MUST use the ED25519 signature scheme and certificate verifier. The certificate verifier MUST accept self-signed certificates if they are validly signed by the public key within, and interpret that public key to be the Mosaic key of the user.</p>"},{"location":"quic.html#quic-alpn","title":"QUIC ALPN","text":"<p>The QUIC ALPN used by Mosaic is \"mosaic\".</p>"},{"location":"quic.html#streaming-and-framing","title":"Streaming and Framing","text":"<p>Clients MAY open multiple streams and write protocol messages into them, however Mosaic works just fine over a single stream.</p> <p>Servers MUST handle multiple streams, and reply to protocol messages on the same stream from which the request came down.</p> <p>Messages are framed based on their prefix of 1 type byte and 3 length bytes.</p>"},{"location":"quic.html#hello-messages","title":"HELLO Messages","text":"<p><code>HELLO</code> and <code>HELLO ACK</code> are handled over the QUIC transport as normal Messages. <sup>rat</sup> <code>HELLO AUTH</code> is invalid under the QUIC transport since authentication is done at the TLS layer.</p>"},{"location":"rationale.html","title":"Rationale","text":"<p>For brevity, the rationale for various decisions has been elided from its context and linked to this page with <sup>rat</sup> links.</p> Contents 0-RTT Binary Records BLAKE3 Bootstrap Length Client-Server Distributed Duplex Communication EdDSA ed25519 Mainline DHT Master-Key Subkey No IP Privacy QUIC Records References Server Identities Sovereign Storing received-at timestamps Timestamps TLS WebSockets XOR"},{"location":"rationale.html#0-rtt","title":"0-RTT","text":"<p>The QUIC transport could have used 0-RTT for higher performance, but 0-RTT has multiple downsides:</p> <ul> <li>Requests MUST be idempotent because they are replayable</li> <li>Endpoints can be used in attack amplification, as the remote hasn't proven it   controls the IP address it claims.</li> <li>There is no forward secrecy.</li> </ul>"},{"location":"rationale.html#binary-records","title":"Binary Records","text":"<p>The binary record format has been designed for performance and size.</p> <ul> <li>The on-network format can be identical to a client's or server's on-disk format</li> <li>There is no parsing overhead (JSON parsing, for example, is quite expensive)</li> <li>Signing and verification are in-place and require zero data copies.</li> <li>Fields from the binary record can be accessed directly without deserialization,   meaning there is optionally no deserialization or copying needed.</li> <li>Data is aligned to 8-byte boundaries</li> <li>Endian order is well specified</li> </ul> <p>Here is a comparison to JSON and CBOR (or BEVE or similar).</p> Encoding Human Readable Extensible Parse Speed Copy to Sign Size JSON yes yes slow copy largest CBOR no yes fast Maybe medium Binary no no NONE NO SMALLEST <p>Except for human readability, CBOR is better than JSON in cases where extensibility is needed.</p> <p>Other than that, binary is better in all respects.</p> <p>We argue that extensibility of the main record is sufficiently done via record kinds, tags and content, and therefore extensibility is not needed for this structure (nostr records have not changed since they were introduced, even though there have been reasons to do so, and they are even simpler).</p> <p>We sacrifice:</p> <ul> <li>Human readability</li> <li>Extensibility</li> </ul> <p>We gain:</p> <ul> <li>Zero parsing required</li> <li>Zero copying for signing required</li> <li>Smallest size has been achieved</li> </ul> <p>BTW: JSON also has character encoding ambiguities.</p>"},{"location":"rationale.html#human-readability","title":"Human Readability","text":"<p>There is a push to use a human-readable format. However, while you can take a high performance binary format and make it human-readable, you cannot take a human-readable format and make it high performance. So to satisfy the requirements of the most number of people, we have to use a high performance binary format within the core of the protocol.</p> <p>This shouldn't be a big concern. It hasn't been a big concern in other widely adopted protocols. For example, HTTP that is transported with gzip is binary data. Developers never see the gzipped data, all the tools they work with show them the line-oriented HTTP after gunzip. I am not aware of anybody complaining that gzipped HTTP is binary, and a bad choice because it is not human readable. I believe our situation is a close parallel to this one.</p> <p>Even though this specification specifies the binary encoding of everything, developers can just use a library that serializes and deserializes into a code structure, and just deal with that structure.</p>"},{"location":"rationale.html#blake3","title":"BLAKE3","text":"<p>This is a very fast hash function with 128-bit security. It is even sometimes faster in software than hardware versions of SHA-256, and s about 14x as fast as software versions of SHA-256. It is highly parallelizable and can take advantage of vector instructions.</p> <p>It's predecessor BLAKE was the most analyzed algorithm during the NIST SHA-3 competition.</p> <p>EdDSA ed25519 is defined to use SHA-512 and we are using BLAKE3 as a drop-in replacement, so we have to produce 512-bit hashes. But these   do not need to be in the record. What the record needs is some way to index and reference it, and part of the hash (at least 256 bits) is good enough for that purpose.</p> <p>In BLAKE3, hashes are variable size, and smaller outputs are prefixes of longer outputs. We utilize this.</p>"},{"location":"rationale.html#bootstrap-length","title":"Bootstrap Length","text":"<p>Bootstraps are limited to 983 characters because ed25519 bootstraps are stored in the bittorrent mainline (Kademlia) DHT which limits records to 1000 bytes, which includes the salt, prefix and bencoding overhead.</p>"},{"location":"rationale.html#client-server","title":"Client-Server","text":"<p>Mosaic uses a client-server architecture.</p> <p>This is because clients and servers serve different roles. Clients are an interface to the user, while servers are an interface to shared Internet accessible data.</p> <p>Nothing precludes a client from also being a server, and calling itself a node.</p> <p>Nothing precludes servers running behind NAT and being hole-punched into, although such a mechanism is not provided for currently (Iroh does a bit more than we need and isn't AFAIK an open protocol but a single software stack).</p> <p>Mosaic servers are used in a way that presumes they will be online and available most of the time. Users functionally declare where their data is, and that \"where\" needs to be available to other users over the Internet most of the time.</p> <p>Mosaic has built-in redundancy across such servers, but nonetheless a machine that is not even intended or capable of being up all the time (such as a phone or laptop) makes a poor mosaic server.</p>"},{"location":"rationale.html#distributed","title":"Distributed","text":"<p>Centralized systems have a fatal flaw: they can easily be captured and controlled by people you do not agree with such as corporate or government censors or hackers. By having a central point of attack, the entire system can be taken down or damaged by bad actors.</p> <p>Mosaic is desgined to be fully distributed, with no centralized points of failure.</p> <p>There is no central place to bootstrap Mosaic either. We use Mainline DHT's bootstrapping, there are mutiple bootstrap servers and you can run your own.</p>"},{"location":"rationale.html#duplex-communication","title":"Duplex Communication","text":"<p>We base Mosaic on transport protocols that provide duplex communication such as QUIC and Web Sockets. This is in opposition to a request-response architecture such as HTTP REST.</p> <p>This allows either side to initiate an action, which turns out to be a very useful feature. For example when a new record that matches a user's subscribed filters arrives at the server, the server can immediately shuttle it to the client. In a request-response architecture, there would be a delay until the client polled again. And due to the polling nature, the client would need to make many poll requests even when nothing was ready for them.</p>"},{"location":"rationale.html#eddsa-ed25519","title":"EdDSA ed25519","text":"<p>We chose this elliptic curve because it is the state of the art.</p> <ul> <li>It is fast</li> <li>It is space efficient</li> <li>It is widely studied</li> <li>It has very good resistance to side-channel attacks</li> <li>It does not require point validation</li> <li>It interoperates with ssh, gpg, TLS, Mainline DHT, and other modern ed25519-based   identity systems</li> </ul> <p>We replaced the hashing algorithm because multiple good cryptographers have indicated that any secure hashing algorithm that produces hashes of the right size could be used, and we chose BLAKE3.</p> <p>We provide a context string so that users cannot be tricked by one application into signing content for a different application (in case users think they can use the same keypair for every application).</p> <p>We added additional checks in order to provide the following guarantees:</p> <ul> <li>Existentially and Strongly unforgeable under chosen message attacks</li> <li>Strongly Binding Signature</li> </ul> <p>See Taming the many EdDSAs</p> <p>See The Provable Security of Ed25519: Theory and Practice</p>"},{"location":"rationale.html#mainline-dht","title":"Mainline DHT","text":"<p>Mainline DHT is distributed and censorship resistant, including being resistant to (or able to detect) Sybil attacks. It is the largest (or one of) and longest living DHT.</p> <p>It also has this mutable data functionality and works with ed25519 signed data.</p>"},{"location":"rationale.html#salt","title":"Salt","text":"<p>We use the salt to avoid collisions, in case the same ed25519 identity keypair is used by both mosaic and pubky, or in case we need to change the format of the bootstrap in the future.</p> <p>We also need different salts because we have two different kinds of bootstraps already. Different salts allow a server keypair to also be a user keypair without collision.</p> <p>These salts are short enough to not use too much space.</p> <p>The user bootstrap salt used to be <code>mub24</code> but was changed to <code>mub25</code> when the format of printable public keys changed.</p>"},{"location":"rationale.html#sequence-numbers","title":"Sequence Numbers","text":"<p>We don't need collision protection here because writing this record requires the secure master key which is likely to be in only one place, and even if copied around we still do not expect people to write often from multiple places.</p> <p>We could change to timestamps instead if this becomes a problem and still remain backwards compatible.</p>"},{"location":"rationale.html#master-key-subkey","title":"Master-Key Subkey","text":"<p>The primary purpose was to allow users to have per-device online keys whil keeping their master secret offline.</p> <p>However this design facilities quite a bit more functionality such as:</p> <ul> <li>Separate encryption keys</li> <li>Subkeys using alternate cryptosystems (e.g. secp256k1 nostr keys)</li> <li>Subkeys as personas, to post about very different things and let people easily follow only   some of what you post.</li> </ul>"},{"location":"rationale.html#no-ip-privacy","title":"No IP Privacy","text":"<p>Several IP privacy network layers exist which already do a good job (Tor, i2p, VPNs). The IP privacy issue is almost entirely orthogonal to the application protocol, and so architecturally it makes sense to separate application layers from privacy layers. There is no good reason to reinvent another privacy layer just for Mosaic since Mosaic can run on top of an already existing general-purpose privacy layer.</p>"},{"location":"rationale.html#quic","title":"QUIC","text":"<p>HTTP has a lot of baggage. WebSockets layers on top of that.</p> <p>What we fundamentally need is size-unrestricted datagrams within TLS.  QUIC gives us that if we do our own framing within a QUIC stream.</p> <p>QUIC is widely deployed due to its use in HTTP 1.3. QUIC is also much faster due to fewer roundtrips and no head-of-line blocking, while taking care of TLS, multiplexed streams, congestion control and other details that we would not dare to reimplement.</p> <p>QUIC also allows us to use ed25519 keys within TLS and get better assurance for a client that it is talking to the right server.</p> <p>However QUIC with modified TLS characteristics is unlikely to work in a browser based client. And QUIC does not work over Tor which is TCP based. Thus we must support other transports.</p>"},{"location":"rationale.html#records","title":"Records","text":""},{"location":"rationale.html#maximum-size","title":"Maximum Size","text":"<p>This is specified so that length fields inside of records can be of a defined fixed number of bits and so that software can make reasonable decisions about buffer sizes.</p>"},{"location":"rationale.html#layout","title":"Layout","text":"<p>Record layout provides a compromise between being tightly packed and providing 64-bit alignment of fields.</p> <p>All data that needs hashing is contigous so that no data needs to be copied in order to produce the hash.</p> <p>ID and Signature do not need signing so need to be at the beginning or the end. Signature may be of various lengths as cryptosystems are added (especially post-quantum ones) so it goes to the end.</p>"},{"location":"rationale.html#flags","title":"Flags","text":"<p>A number of record properties that span applications have been conceived of and we provided space to set these.</p>"},{"location":"rationale.html#duplicate-timestamp","title":"Duplicate Timestamp","text":"<p>We have the timestamp twice.</p> <p>We have it in the ID so that IDs sort in timestamp order.</p> <p>But IDs are not hashed and signed. So we have to duplicate it in the main part of the record.</p>"},{"location":"rationale.html#tags","title":"Tags","text":"<p>Tag values usually don't need to be very large. However occasionally they do, such as when referencing a URL. Thus we wish to have the possibility of very large tags. A two-byte length gives us 65,536 bytes which seems like plenty.</p> <p>Although tags must be indexed by storage engines, storage engines MAY simply index a fixed prefix of a tag rather than the entire thing as indexes do not need to be perfect (records which do not actually match can be efficiently removed after the index lookup operation).</p> <p>While for some tag types a length could be inferred, this is not true in general. Applications should not be required to recognize every tag type to look up its known length or type-specific method of length calculation.</p> <p>Some tag types MAY start with padding in the value in order to better align their data.</p>"},{"location":"rationale.html#tcp","title":"TCP","text":"<p>TCP with TLS 1.3 is a required transport so that servers may operate through UDP-adverse situations. It is technically simpler than QUIC and not much of an additional ask.</p>"},{"location":"rationale.html#references","title":"References","text":""},{"location":"rationale.html#id-fields","title":"Id Fields","text":"<p>The hash in the ID cryptographically represents all the data that was hashed. It is 40 bytes long because we needed at least 32 bytes for cryptographic reasons, and because addresses are already 48 bytes long, we used the extra 8 bytes to extend the hash.</p> <p>The entire 512-bit (64 byte) hash is overkill. Even though we have to produce it for the EdDSA ed25519 signature, we don't have to waste precious record space with that entire long hash.</p> <p>By putting the big-endian timestamp at the front of the ID, IDs sort in time order and group temporally (for database performance).</p>"},{"location":"rationale.html#address-fields","title":"Address Fields","text":"<p>By not including the hash of content, records can be edited and replaced by the author (where edits make sense). Application will specify which kind of reference to use in which context.</p> <p>By containing the Author public key, record location can be determined through bootstrapping.</p> <p>By containing the kind, records that are edited cannot change their kind.</p> <p>By containing the kind, software can filter records that are not relevant to a situation without needing to look them up first.</p> <p>By containing a long unique nonce, it is statistically infeasible for two different records to have the same address unintentionally. In fact this is overkill, but we had the space due to alignment requirements.</p> <p>By not specifying how the nonce is generated, applications can solve different problems with different requirements.</p> <p>At only 48 bytes long, these can easily fit into a 253 byte tag when needed and are the same size as an ID.</p> <p>By the first bit being a 1, IDs and ADDRs can be intermixed and their type determined by that bit.</p> <p>--</p>"},{"location":"rationale.html#server-identities","title":"Server Identities","text":"<p>By recognizing a server by it's key, we can verify server identity directly.</p> <ul> <li>We no longer need to trust DNS, that it gave us the right IP address</li> <li>We no longer need to trust Certification Authorities, that the DNS to IP address binding   is correct.</li> </ul> <p>Additionally, servers can now present themselves at multiple transport endpoints. They can also hop from endpoint to endpoint if they are being actively targetted.</p> <p>By having a strong form of identification, clients can maintain reliable reputational information about servers even as they move to different endpoints.</p>"},{"location":"rationale.html#sovereign","title":"Sovereign","text":"<p>Ethically, we believe in free speech and empowering individuals.</p> <p>All participation is self-managed and nobody can cancel your account. You manage your own keys.</p> <p>This allows users to be independent of any service provider and to change the servers they use at any time.</p> <p>Mosaic does not depend on upstream DNS providers and Mosaic does not depend on Certification Authorities to issue certificates.</p> <p>We use a dumb-server smart-client model in order to push as much control into the user's realm (the client space) as feasible.</p>"},{"location":"rationale.html#storing-received-at-timestamps","title":"Storing received-at timestamps","text":"<p>We require clients and servers to store this information for two reasons.</p> <p>The first and most important is for key revocation. Revocation can't be applied to only records in the past judged by timestamps in the records themselves because those timestamps can be forged. By remembering when a record was received, an upper time bound is established, and records prior to that bound can continue to be trusted while records after that bound can be invalidated.</p> <p>Secondly, when synchronizing with a relay, clients want to ask for records they have not gotten yet. They can use this received-at data to avoid missing records that were timestamped earlier but arrived later than the last time they checked for records.</p>"},{"location":"rationale.html#timestamps","title":"Timestamps","text":""},{"location":"rationale.html#leap-seconds","title":"Leap Seconds","text":"<p>Unixtime is a discontinous time scale that is occasionally adjusted by leap seconds. Subtracting two unixtimes could give a time interval that is off by up to 28 seconds (for example when comparing dates before 1 Jan 1972 with today).</p>"},{"location":"rationale.html#nanoseconds","title":"Nanoseconds","text":"<p>32 bytes do not provide enough space for sub-second precision. Once you choose to use the next larger integer (u64) you get plenty of numeric space. Thus we use it for nanosecond precision, even if nobody needs to be that precise.</p>"},{"location":"rationale.html#big-endian","title":"Big Endian","text":"<p>Timestamps are stored in big-endian format so that they sort in time order even when they are interpreted as a simple sequence of bytes (lexigraphically).</p>"},{"location":"rationale.html#timestamp-ranges","title":"Timestamp Ranges","text":"<p>Timestamp ranges are inclusive on both ends. This is because they are usually iterated backwards (from the newest to the oldest) and if we made the oldest one exclusive (as a normal range would do) it would easily suprise many people who would expect the until to be the exclusive one. Also, timestamps are fine enough that including one extra nanosecond has little practical effect.</p>"},{"location":"rationale.html#tls","title":"TLS","text":"<p>We use TLS security because it is heavily researched and state-of-the-art.</p> <p>This next section applies to QUIC and TCP, but not to WebSockets where browsers will enforce security policies.</p> <p>In the QUIC and TCP transports we don't use the X.509 certificates as intended since both client and server are known by their public keys, not by DNS names.  Instead we use RawPublicKey or self-signed certificates. Clients are authenticated via client-side certificates.</p>"},{"location":"rationale.html#websockets","title":"WebSockets","text":"<p>Browser-based JavaScript (and WASM) clients are bound by tight security policies that do not allow TLS manpulation of QUIC connections. Therefore we cannot use TLS authentication via self-signed certificates, nor can we expect ed25519 algorithms to be supported by the browsers (they are not supported as of this writing by any major browser).</p> <p>Additionally, QUIC based on UDP does not work over Tor which is based on TCP.</p> <p>So for these clients, an alternate form of server-to-client authentication must be made available, and the WebSocket transport fits this bill.</p>"},{"location":"rationale.html#xor","title":"XOR","text":"<p>We use XOR within the Encrypted Secret Key algorithm. XOR is very efficient. But XOR is dangerous if used incorrectly. We think it is ok for the following reasons, but will change the algorithm if it can be shown to be weak:</p> <ul> <li>The symmetric key is random.</li> <li>The symmetric key is non-deterministic (not even by the password since we use a salt).</li> <li>The symmetric key is the full length of the data being encrypted (not repeated).</li> <li>The data being encrypted is short (32 bytes) and random, and not subject to frequency   analysis.</li> <li>There is no known-plaintext attack possible, so the malleability is not relevant.</li> </ul>"},{"location":"record.html","title":"Record","text":"<p>All Mosaic data is stored within Record structures (except for bootstrap data and protocol messages).</p>"},{"location":"record.html#maximum-size","title":"Maximum Size","text":"<p>The maximum size <sup>rat</sup> of a record is 1 mebibyte (1,048,576 bytes).</p>"},{"location":"record.html#layout","title":"Layout","text":"<pre><code>            1   2   3   4   4   5   6\n    0   8   6   4   2   0   8   6   4\n  0 +-------------------------------+ &lt;-----+\n    | Timestamp                     |       |\n  8 +-------------------------------+       |\n    | Hash 1/5                      |       |\n 16 +-------------------------------+       |\n    | Hash 2/5                      |  I    |\n 24 +-------------------------------+  D    |\n    | Hash 3/5                      |       |\n 32 +-------------------------------+       |\n    | Hash 4/5                      |       |\n 40 +-------------------------------+       |\n    | Hash 5/5                      |       |\n 48 +-------------------------------+ &lt;-----|&lt;--+\n    | Unique Address Nonce          |       |   |\n 56 +-------------------------------+       |   |\n    | Kind                          |   A   |   |\n 64 +-------------------------------+   D   |   |\n    | Author public key, 1/4        |   D   |   |\n 72 +-------------------------------+   R   |   |\n    | Author public key, 2/4        |   E   |   |\n 80 +-------------------------------+   S   |   |\n    | Author public key, 3/4        |   S   |   |\n 88 +-------------------------------+       |   |\n    | Author public key, 4/4        |       |   |\n 96 +-------------------------------+ &lt;-----+   |\n    | Signing public key, 1/4       |           |\n104 +-------------------------------+      S    |\n    | Signing public key, 2/4       |      I    |\n112 +-------------------------------+      G    |\n    | Signing public key, 3/4       |      N    |\n120 +-------------------------------+      E    |\n    | Signing public key, 4/4       |      D    |\n128 +-------------------------------+           |\n    | Timestamp                     |      D    |\n136 +-------------------------------+      A    |\n    | Flags                         |      T    |\n144 +-------------------------------+      A    |\n    | LenT  | LenS  | LenP          |           |\n152 +-------------------------------+           |\n    | Tags...                       |           |\n    |                   .. +PADDING |           |\n152 + LenTPad ----------------------+           |\n    | Payload ...                   |           |\n    |                   .. +PADDING |           |\n152 + LenTPad + LenPPad ------------+ &lt;---------+\n    | Signature...                  |\n    |                   .. +PADDING |\n152 + LenTPad + LenPPad + LenSPad --+\n</code></pre> <p>Rationale</p>"},{"location":"record.html#sections-and-fields","title":"Sections and Fields","text":"<p>Records contain the following sections and fields:</p>"},{"location":"record.html#id-section","title":"ID Section","text":"<p>A 48 byte ID from <code>[0:48]</code> made up of the following two parts:</p>"},{"location":"record.html#id-timestamp","title":"ID: Timestamp","text":"<p>8 bytes from <code>[0:8]</code></p> <p>This is the big-endian unsigned 64-bit timestamp as described in timestamps, which represents the number of nanoseconds that have elapsed since 1 January 1970 including within leap seconds.</p> <p>This is copied from the internal Timestamp from [128:136].</p>"},{"location":"record.html#id-hash","title":"ID: Hash","text":"<p>40 bytes from <code>[8:48]</code></p> <p>This is the first 40 bytes of the BLAKE3 hash of the \"Signed Data\" section.</p>"},{"location":"record.html#address","title":"Address","text":"<p>A 48 byte Address from <code>[48:96]</code> made up of the following three parts. <sup>ref</sup></p>"},{"location":"record.html#address-unique-nonce","title":"Address: Unique Nonce","text":"<p>8 bytes at <code>[48:56]</code>.  These bytes MUST start with a 1 bit.</p> <p>These bytes make an address unique (within the context of an author and a kind). They can be created in a number of different ways, depending on the application and its purpose:</p> <ol> <li>They can be generated randomly.</li> <li>They can be a timestamp, modified with a leading 1 bit.    This is useful when the addresses should sort in time order.</li> <li>They can be the first 8 bytes of a BLAKE3 hash of a fixed slice    of bytes. This is useful for applications that require seeking a    record by a known fixed string of bytes (with known author and kind).</li> <li>They can be copied from a previous record, to replace or version that    record if the kind is replaceable or versioned.</li> </ol> <p>The method of creation is determined by the application layer.</p>"},{"location":"record.html#address-kind","title":"Address: Kind","text":"<p>A kind, represented in 8 bytes at <code>[56:64]</code>.</p>"},{"location":"record.html#address-author-public-key","title":"Address: Author Public Key","text":"<p>32 bytes at <code>[64:96]</code></p> <p>This is the identity of the author, expressed as a public key from their master EdDSA ed25519 keypair.</p>"},{"location":"record.html#signing-public-key","title":"Signing Public Key","text":"<p>32 bytes at <code>[96:128]</code></p> <p>This is the public key of the signing keypair, which is usually a subkey under the author's master keypair (but theoretically could be delegated in some other fashion in the future). It could also be the Master key itself.</p>"},{"location":"record.html#timestamp","title":"Timestamp","text":"<p>8 bytes at <code>[128:136]</code></p> <p>This is the big-endian unsigned 64-bit timestamp as described in timestamps, which represents the number of nanoseconds that have elapsed since 1 January 1970 including within leap seconds.</p> <p>It is repeated in the ID, but this copy is digitally signed by being included in the data that gets hashed.</p>"},{"location":"record.html#flags","title":"Flags","text":"<p>8 bytes at <code>[136:144]</code>.</p>"},{"location":"record.html#flag-byte-0","title":"Flag Byte 0","text":"<ul> <li><code>0x01 ZSTD</code> - The payload is compressed with Zstd</li> <li><code>0x04 FROM_AUTHOR</code> - Servers SHOULD only accept the record from the author (requiring authentication)</li> <li> <p><code>0x80, 0x40</code> - Signature scheme:</p> <ul> <li><code>00 - EDDSA</code> - EdDSA ed25519 (default)</li> <li><code>01 - RESERVED FOR SECP256K1</code> - secp256k1 Schnorr signatures (not yet in use)</li> <li><code>10 - RESERVED</code></li> <li><code>11 - RESERVED</code></li> <li>NOTE: This only affects the signing key and the signature. The hash is   always created with BLAKE3, and the master key is always EdDSA   ed25519.</li> </ul> </li> <li> <p>All other bits - RESERVED and MUST be 0. If any of the reserved bits are 1, software MUST   reject the record.</p> </li> </ul>"},{"location":"record.html#flag-bytes-1-7","title":"Flag Bytes 1-7","text":"<p>RESERVED</p> <p>Bytes 1 and 2 MUST be zero and the record MUST be rejected if any of these bits are set. These are reserved for future feature flags that require understanding by the software.</p> <p>The remaining Bytes MUST be ignored.</p>"},{"location":"record.html#lent","title":"LenT","text":"<p>2 bytes at <code>[144:146]</code> representing the length of the tags section in bytes as an unsigned integer in little-endian format.</p> <p>This represents the exact length of the tags section, not counting padding at the end to achieve 64-bit alignment.</p> <p>The maximum tags section length is 65536 bytes.</p>"},{"location":"record.html#lentpad","title":"LenTPad","text":"<p>This is NOT included in the record, it is calculated.</p> <p>The length of the tags section including padding is called <code>LenTPad</code> and is calculated as <code>(LenT + 7) &amp; !7</code></p>"},{"location":"record.html#lens","title":"LenS","text":"<p>2 bytes at <code>[146:148]</code> representing the length of the signature in bytes as an unsigned integer in little-endian format.</p> <p>This represents the exact length of the signature, not counting padding at the end to achieve 64-bit alignment.</p> <p>The maximum signature length is 65536 bytes.</p> <p>For Ed25519 signatures, the length is 64 bytes.</p>"},{"location":"record.html#lenspad","title":"LenSPad","text":"<p>This is NOT included in the record, it is calculated.</p> <p>The length of the signature section including padding is called <code>LenSPad</code> and is calculated as <code>(LenS + 7) &amp; !7</code></p>"},{"location":"record.html#lenp","title":"LenP","text":"<p>4 bytes at <code>[148:152]</code> representing the length of the payload section in bytes as an unsigned integer in little-endian format.</p> <p>This represents the exact length of the payload section, not counting padding at the end to achieve 64-bit alignment.</p> <p>The maximum payload section length is 1_048_384 bytes (which is the maximum record size minus the header size).</p>"},{"location":"record.html#lenppad","title":"LenPPad","text":"<p>This is NOT included in the record, it is calculated.</p> <p>The length of the payload section including padding is called <code>LenPPad</code> and is calculated as <code>(LenP + 7) &amp; !7</code></p>"},{"location":"record.html#tags","title":"Tags","text":"<p>Varying bytes at <code>[152:152+LenT]</code></p> <p>These are searchable key-value tags.</p> <p>The tags section is padded out to 64-bit alignment.</p> <p>The maximum tags section length is 65536 bytes.</p> <p>Tag types are documented at the Tag Type Registry which includes the defined Core Tags.</p>"},{"location":"record.html#payload","title":"Payload","text":"<p>Varying bytes at <code>[152+LenTPad:152+LenTPad+LenP].</code></p> <p>Payload is application specific data, and is opaque at this layer of specification, except for records defined by the Core Application.</p> <p>The payload section is padded out to 64-bit alignment.</p> <p>The maximum payload section length is 1_048_384 bytes (which is the maximum record size minus the header size).</p>"},{"location":"record.html#signature","title":"Signature","text":"<p>Signature bytes at <code>[152+LenTPad+LenPPad:]</code></p> <p>The signature field is the signature of the record produced using the construction procedure.</p>"},{"location":"record.html#construction","title":"Construction","text":"<ol> <li>Fill in all the signed data from <code>[48:152+LenTPad+LenPPad]</code>.</li> <li>Take a BLAKE3 hash of <code>[48:152+LenTPad+LenPPad]</code>, unkeyed, and extend to 64 bytes    of output using BLAKE3's <code>finalize_xof()</code> function. This does not    directly go into the record.</li> <li>Generate EdDSA ed25519ph pre-hashed signature of the 512-bit hash    generated in step 2 using the Signing secret key, and providing the    context string of \"Mosaic\". NOTE: ed25519 calls for a SHA-512 hash,    but we use a BLAKE3 hash instead. Place the signature at bytes <code>[152+LenTPad+LenPPad:]</code>.</li> <li>Copy the first 40 bytes of the hash generated in step 2 to <code>[8:48]</code>.</li> <li>Copy the 64-bit timestamp to <code>[0:8]</code>.</li> </ol>"},{"location":"record.html#validation","title":"Validation","text":"<p>Records MUST be fully validated by clients.</p> <p>Records MUST be fully validated by servers upon receipt except for the steps marked CLIENTS ONLY.</p> <p>Validation steps:</p> <ol> <li>The length must be between 152 and 1048576 bytes.</li> <li>The length must equal 152 + LenTPad + LenPPad + LenSPad.</li> <li>The Signing public key MUST be validated according to the    cryptography key validation checks.</li> <li>The Author public key MUST be validated according to the    cryptography key validation checks.</li> <li>CLIENTS ONLY: The Signing public key MUST be verified to be    a non-revoked subkey of the Author via the Author's    bootstrap.</li> <li>Take a BLAKE3 hash of <code>[48:152+LenTPad+LenPPad]</code>, unkeyed, and extend to    64 bytes of output using BLAKE3's <code>finalize_xof()</code> function.</li> <li>Verify the hash: Compare bytes <code>[0:40]</code> of this hash with bytes    <code>[8:48]</code> of the record. They must match or validation has failed.</li> <li>Verify the ID timestamp: bytes <code>[0:8]</code> must be equal to bytes <code>[128:136]</code>.</li> <li>Verify the signature: The signature must be a valid signature according    to the sitnature scheme specified in the record flags.</li> <li>Reserved flags in flag bytes 1 and 2 must be 0.</li> <li>CLIENTS ONLY: Application specific validation SHOULD be performed.</li> </ol>"},{"location":"reference.html","title":"References","text":"<p>A reference is a pointer from one record to another.</p> <p>Mosaic defines two kinds of references</p>"},{"location":"reference.html#the-first-bit","title":"The first bit","text":"<p>References can be distinguished by their first bit. Id references start with a 0 bit, whereas address references start with a 1 bit.</p>"},{"location":"reference.html#id-reference","title":"Id Reference","text":"<p>An id reference is a pointer to an exact record with no provision for replacement or edits. It contains some hash of the message making it unique. See record for the Id field.</p>"},{"location":"reference.html#address-reference","title":"Address Reference","text":"<p>An address reference <sup>rat</sup> is a pointer to a group of records that have the same address, which usually represent an initial record and it's subsequent replacements, often (and by default presumably) with the most recent record superceding the older records, but refer to the specific application.</p> <p>An address consists of three fields which are contiguous and in order in the record layout at <code>[128:176]</code> making up 48 bytes.</p> <ul> <li>Unique address nonce (8 bytes) starting with a 1 bit,</li> <li>The kind (8 bytes),</li> <li>The the author's public key (32 bytes),</li> </ul> <p>The nonce can be created in a multitude of ways depending on the needs of the application</p> <ul> <li>Randomly</li> <li>As a copy of a previous record's nonce, to replace that record or add a   new version</li> <li>As a well-known string, thus making it easy to find a well-known record</li> </ul> <p>Records with the same address MUST necessarily have the same author and kind, but they can be signed by a different signing keypair, have modified flags, and change their tags and content.</p>"},{"location":"reply_comment.html","title":"Reply Comment (kind)","text":""},{"location":"reply_comment.html#kind","title":"Kind","text":"<p>Applicaton: 1 (Mosaic Social Media)</p> <p>App Kind: 2 (Reply Comment)</p> <p>Flags: 0x001c = Unique, Everybody, Printable</p> <p>Representation = 0x0000_0001_0002_001c</p>"},{"location":"reply_comment.html#tags","title":"Tags","text":"<p>This MUST include exactly one reply tag, either 0x2 or 0x3.</p> <p>This MUST include exactly one root tag, either 0x2 or 0x3.</p>"},{"location":"reply_comment.html#payload","title":"Payload","text":"<p>The payload follows the Human Readable Content rules.</p>"},{"location":"reply_comment.html#flags","title":"Flags","text":"<p>There are no special flag restrictions.</p>"},{"location":"reply_comment.html#server-used","title":"Server Used","text":"<p>These are posted to all of the author's Outbox servers and also to all of the parent Record author's Inbox servers.</p>"},{"location":"reporting.html","title":"Reporting","text":"<p>TBD</p>"},{"location":"status.html","title":"Status and Development","text":""},{"location":"status.html#versions-and-attribution","title":"Versions and Attribution","text":"<p>Many people are expected to contribute to Mosaic and as a result there are various divergent viewpoints as to how Mosaic ought to be. As a result, we label this edition as the Mike Dilger edition. You will see this at the bottom of every page. Other Mosaic contributors can fork this and maintain their own editions. The community will eventually settle on something because people want to be compatible.</p> <p>Version numbers have MAJOR.MINOR.PATCH format which carry the following meaning:</p> <ul> <li>MAJOR: This is a breaking change. Software should support all major versions.</li> <li>MINOR: Functionality has changed. But this is not a breaking change.</li> <li>PATCH: Something has changed, but it is not a functional change.</li> </ul> <p>Major Version 0 is pre-release. There will be a long series of breaking changes in version 0 without updating the major version from 0.  Any deployments should be for testing purposes, be considered provisional and expect breaking changes.</p> <p>Version 1.x will be the first stabilized and frozen release. All future versions are intended to support it for backwards compatibility.</p>"},{"location":"sync.html","title":"Mosaic Sync Protocol Extension","text":"<p>This extends the protocol with negentropy support.</p> <p>The following messages are added:</p>"},{"location":"sync.html#client-messages","title":"Client messages","text":""},{"location":"sync.html#sync-init","title":"Sync Init","text":"<p>0x10</p> <p>This is the initialization of a negentropy sync of records</p>"},{"location":"sync.html#sync-data","title":"Sync Data","text":"<p>0x11</p> <p>This is a data packet within a negentropy sync of records</p>"},{"location":"sync.html#sync-close","title":"Sync Close","text":"<p>0x12</p> <p>This is the closing of a negentropy sync of records</p>"},{"location":"sync.html#server-messages","title":"Server messages","text":""},{"location":"sync.html#sync-data_1","title":"Sync Data","text":"<p>0x91</p> <p>This is a data packet within a negentropy sync of records</p>"},{"location":"sync.html#sync-error","title":"Sync Error","text":"<p>0x93</p> <p>This is an indication that negentropy sync has failed</p>"},{"location":"tag_types.html","title":"Tag types","text":"<p>Tag types are 2-byte (16-bit) unsigned integers in little-endian format. Each application registers their indexable tag types here to prevent collision.</p> <p>Applications should manage non-indexable tags within the payload.</p> <p>Mosaic Core defines a few core tags in Core Tags.</p> Tag Type Name Standard 0x0 PADDING MARKER This is not a tag, it signifies a padding area 0x1 Notify Public Key Mosaic Core Tags 0x2 Reply Mosaic Core Tags 0x3 Root Mosaic Core Tags 0x8 Nostr Sister Event Mosaic Core Tags 0x10 Subkey Mosaic Core Tags 0x20 Content Segment: User Mention Mosaic Core Tags 0x21 Content Segment: Server Mention Mosaic Core Tags 0x22 Content Segment: Quote Mosaic Core Tags 0x24 Content Segment: URL Mosaic Core Tags 0x25 Content Segment: Image Mosaic Core Tags 0x26 Content Segment: Video Mosaic Core Tags <p>Application defined tags are TBD.</p>"},{"location":"tags.html","title":"Tags","text":"<p>Tags <sup>rat</sup> contain data that is indexed and searchable. All tags are searchable on servers. If an application requires unsearchable tags, these can be defined within that application's payload.</p> <p>Tags are laid out as follows:</p> <pre><code>0       2        4         65536 max\n+-------+--------+----------+\n| len   | type   | value ...|\n+-------+--------+----------+\n</code></pre> <ul> <li><code>[0:2]</code> - The length of the tag value as a little-endian unsigned integer.              This length includes the len and type bytes and thus MUST be              at least 4.</li> <li><code>[2:4]</code> - The type of the tag. All tag types are listed in the Tag types registry.</li> <li><code>[4:]</code> - The value, which is at most 65,532 bytes long.</li> </ul> <p>Tag values are generally considered opaque at this layer, except for Core tags with the Core Application.</p> <p>Unlike nostr, tags do not have multiple value fields. Applications can encode multiple fields into the 65,532 data bytes however they wish.</p> <p>Applications SHOULD expect tags to be indexed by their type and some prefix of their value (of unspecified length, but it SHOULD include at least 22 bytes including the type). As a consequence, tags should be defined to front-load their unique aspects within the first 20 bytes of their value to maximize the effectiveness of indexes.</p>"},{"location":"tcp.html","title":"Mosaic over TCP","text":""},{"location":"tcp.html#when-to-choose-tcp","title":"When to choose TCP","text":"<p>TCP is the best transport in cases where a user wishes to have a high degree of privacy and also a high degree of censorship resistance, because TCP can be used through Tor, and also the TCP implementation does not rely on CAs or DNS.</p> <p>However the TCP transport does not work in browser-based clients, in which case only the WebSockets transport will suffice. It is also not as high-performance as the QUIC transport.</p>"},{"location":"tcp.html#tls","title":"TLS","text":"<p>Over TCP, Mosaic MUST use TLS version at least 1.2, preferably TLS 1.3.</p> <p>TLS MUST specify the EdDSA signature algorithm, using the ed25519 signing keys.</p> <p>TLS certificates SHALL be either RawPublicKey or self-signed, and use the ed25519 public key (either the server's master public key or the client's signing public key).</p> <p>Servers SHOULD request client-side certificates if they wish to authenticate users. If clients do not provide certificates, they are to be considered anonymous. Servers MAY present different services depending on whether a user is authenticated or not.</p>"},{"location":"tcp.html#hello-messages","title":"HELLO Messages","text":"<p><code>HELLO</code>, <code>HELLO ACK</code> and <code>HELLO AUTH</code> are handled over the TCP transport as normal Messages. <sup>rat</sup></p>"},{"location":"timestamps.html","title":"Timestamps","text":"<p>Timestamps are unixtimes, adjusted for leap seconds, expressed in nanoseconds <sup>rat</sup> and encoded into a 64-bit unsigned integer in big-endian format.</p> <p>The integer represents the number of nanoseconds that have actually elapsed on the surface of the Earth since the UNIX epoch. The epoch is defined as (these definitions are believed to be equivalent):</p> <ul> <li>1 January 1970 UTC</li> <li>Unixtime 0</li> <li>NTP timestamp 2208988800</li> <li>Julian Date 2440587.5 UT1</li> <li>Julian Date 2440587.5004766666 TT<ul> <li>NOTE: the fracton above beyond .5 represents the 9 seconds that UTC was   behind TAI, plus the 32.184 seconds that TAI is behind TT.</li> </ul> </li> </ul> <p>Timestamps account for all leap seconds <sup>rat</sup> unlike unixtime and unlike NTP timestamps (both of which pretend that leap seconds did not happen).</p> <p>Before 31 Dec 1971 23:59:60, timestamps match unixtime.</p> <p>As of this writing (unixtime 1732829887) the current timetstamp which includes 28 additional leap seconds is 1732829915.  Expressed in nanoseconds it is 1_732_829_915_000_000_000. As a big-endian 64 bit unsigned integer its binary representation is 0x180c_3fa0_73be_ce00.</p> <p>Since computers tend to be synchronized with UTC for the time being, your software will need to be aware of leap seconds so it can adjust.</p> <p>Leap second data is available at the IANA leap second list The data is to be interpreted as follows:</p> <ul> <li>The leftmost column is an NTP timestamp. Subtract 2_208_988_800 from it to   get a unixtime.</li> <li>The rightmost column is an adjustment to TAI.  Subtract 9 from it to get the   number of leapseconds that have elapsed as of the time in the first column and   thereafter (until the next entry).</li> <li>A timestamp is the current unixtime, plus the number of leap seconds that have   elapsed.</li> </ul> <p>Refer to the IANA leap second list</p>"},{"location":"transports.html","title":"Transports","text":"<p>NOTICE: Once WebTransport matures further, we may swap it in for WebSockets because it would be strictly better:</p> <ul> <li>QUIC, if available, with fallback to HTTP/2 (thus Tor can work)</li> <li>serverCertificateHashes (to avoid trust in DNS and CAs)</li> </ul> <p>NOTICE: Development is proceeding with QUIC first.</p> <p>Mosaic defines three transports with the following characteristics:</p> Transport URL Scheme Required Browser clients Tor Trust Perf WebSockets mosaicwss Required<sup>rat</sup> Yes Yes Relies on CAs and DNS Lowest QUIC mosaic Optional<sup>rat</sup> No No None Highest TCP mosaictcp Optional No Yes None Med-Low"},{"location":"transports.html#transport-requirements","title":"Transport Requirements","text":"<p>For compatibility purposes, all Mosaic servers and clients MUST be able to communicate over Websockets over HTTPS. Every Mosaic server MUST advertise at least one Websockets over HTTPS endpoint. This requirement is in place to support browser-based clients, so that every server can be contacted by every client.</p>"},{"location":"url.html","title":"URL","text":"<p>Mosaic servers are located using URLs. Mosaic server URLs are subject to the following rules.</p>"},{"location":"url.html#scheme","title":"Scheme","text":"<p>Mosaic URLs MUST contain one of the following schemes which indicate which transport is used:</p> <ul> <li><code>mosaic</code> for Mosaic over QUIC</li> <li><code>mosaictcp</code> for Mosaic over TCP with TLS</li> <li><code>mosaicwss</code> for Mosaic over WebSockets</li> </ul>"},{"location":"url.html#host","title":"Host","text":"<p>Mosaic URLs MUST contain a host.</p> <p>This SHOULD normally be an IP address (either IPv4 or IPv6) but it MAY be a DNS name.</p> <p>Hosts MAY be Tor onion sites (specified as a DNS name). When hosts are exposed through Tor, the scheme MUST NOT be <code>mosaic</code> since QUIC cannot transit Tor.</p>"},{"location":"url.html#port","title":"Port","text":"<p>Mosaic URLs MAY contain a port.</p> <p>If a port is not provided, then the following defaults apply</p> <ul> <li>For <code>mosaic</code> (QUIC) the default port is 1320 (udp).</li> <li>For <code>mosaictcp</code> the default port is 1320 (tcp).</li> <li>For <code>mosaicwss</code> the default port is 443 (tcp).</li> </ul>"},{"location":"url.html#path","title":"Path","text":"<p>Mosaic URLs MUST specify the root path <code>/</code> exactly and no other path.</p>"},{"location":"url.html#other-url-components","title":"Other URL components","text":"<p>Mosaic URLs MUST NOT contain a user, password, query, or fragment section.</p> <p>If any of these is found, software MUST ignore and SHOULD prune such information.</p>"},{"location":"websockets.html","title":"Mosaic over Websockets","text":""},{"location":"websockets.html#when-to-choose-websockets","title":"When to choose WebSockets","text":"<p>WebSockets is the only working transport available to browser-based clients. In this case, users must trust CAs and DNS. Browsers may not allow meddling with their TLS implementations.</p> <p>WebSockets may also be used over Tor in the Tor browser.</p> <p>If a browser-based client is not a requirement, then the other two transports (TCP and QUIC) are superior, each in their own way.</p>"},{"location":"websockets.html#websockets-reference","title":"WebSockets Reference","text":"<p>See the WebSockets RFC.</p>"},{"location":"websockets.html#tls","title":"TLS","text":"<p>Over WebSockets, Mosaic MUST use TLS version at least 1.2, preferably TLS 1.3.</p> <p>TLS certificates must be issued by Certificate Authorites commonly trusted by browsers. This is so that web-based clients can access the server.</p> <p>Client-side certificates are not used.</p>"},{"location":"websockets.html#binary","title":"Binary","text":"<p>All messages (outside of HELLO messages described below) use websockets binary.</p> <p>Messages are formed as the binary message protocol specified in Protocol messages. Each message starts with a single byte indicating the type, followed by the data that such type requires.</p> <p>Clients MUST only send client messages. If a server reads a server message from a client, it SHOULD disconnect.</p> <p>Servers MUST only send server messages. If a client reads a client message from a server, it SHOULD disconnect.</p>"},{"location":"websockets.html#hello-messages","title":"HELLO Messages","text":"<p><code>HELLO</code>, <code>HELLO ACK</code> and <code>HELLO AUTH</code> are handled over the WebSockets transport in the following fashion:</p>"},{"location":"websockets.html#hello","title":"HELLO","text":"<p>HELLO information is encoded into HTTP headers within the upgrade request.</p> <p>The <code>Sec-WebSocket-Protocol</code> header MUST be present and set to <code>mosaic2025</code>. If this is not presented, a server may either refuse service and close the connection, or presume the connection is nostr (if it is dual-stack). It SHOULD NOT presume the connection is Mosaic.</p> <p><code>X-Mosaic-Versions</code> is a comma-separated list of major version numbers supported by the client.</p> <p><code>X-Mosaic-Features</code> is a comma-separated list of application features suppored by and requested by the client.</p> <p><code>X-Mosaic-Authenticate-As</code> is a mopub0 encoded public key of the client's user, only if the client wishes to authenticate.</p> <p><code>X-Mosaic-Server-Authenticate-Nonce</code> is a ASCII nonce string.</p>"},{"location":"websockets.html#hello-ack","title":"HELLO ACK","text":"<p>The <code>Sec-WebSocket-Protocol</code> header MUST be present and set to <code>mosaic2025</code>. If this is not presented, a client may either refuse service and close the connection, or presume the connection is nostr (if it is dual-stack). It SHOULD NOT presume the connection is Mosaic.</p> <p>HELLO ACK information is also encoded into HTTP headers within the upgrade response.</p> <p><code>X-Mosaic-Version</code> is the single major version number decided by the server. It MUST be present in the <code>X-Mosaic-Versions</code> from the HELLO message.</p> <p><code>X-Mosaic-Features-Accepted</code> is a comma-separated list of application features accepted by the server.</p> <p><code>X-Mosaic-Server-Authentication</code> is a base64 encoded ed25519 signature of the nonce provided in the HELLO messag <code>X-Mosaic-Server-Authenticate-Nonce</code> header.</p> <p><code>X-Mosaic-Client-Authenticate-Nonce</code> is a server-generated nonce for the client to authenticate with, only in the case that the HELLO message contained a <code>X-Mosaic-Authenticate-As</code> header.</p> <p><code>X-Mosaic-Service-Url</code> is an optional service URL that servers may present to clients.</p>"},{"location":"websockets.html#hello-auth","title":"HELLO AUTH","text":"<p>This MUST is sent by the client as the first WebSocket binary message. See Messages.</p>"}]}